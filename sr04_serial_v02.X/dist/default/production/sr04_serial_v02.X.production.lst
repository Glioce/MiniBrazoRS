

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Nov 13 03:43:46 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.10
    23                           ; Generated 31/07/2019 GMT
    24                           ; 
    25                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000D                     	;# 
   130  000E                     	;# 
   131  000E                     	;# 
   132  000F                     	;# 
   133  0010                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0014                     	;# 
   138  0015                     	;# 
   139  0015                     	;# 
   140  0016                     	;# 
   141  0017                     	;# 
   142  0018                     	;# 
   143  0019                     	;# 
   144  001A                     	;# 
   145  001B                     	;# 
   146  001B                     	;# 
   147  001C                     	;# 
   148  001D                     	;# 
   149  001E                     	;# 
   150  001F                     	;# 
   151  0081                     	;# 
   152  0085                     	;# 
   153  0086                     	;# 
   154  0087                     	;# 
   155  0088                     	;# 
   156  0089                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176                           
   177                           	psect	strings
   178  0560                     __pstrings:	
   179  0560                     stringtab:	
   180  0560                     __stringtab:	
   181                           
   182                           ;	String table - string pointers are 1 byte each
   183  0560  1BFF               	btfsc	btemp+1,7
   184  0561  2D6A               	ljmp	stringcode
   185  0562  1383               	bcf	3,7
   186  0563  187F               	btfsc	btemp+1,0
   187  0564  1783               	bsf	3,7
   188  0565  0800               	movf	0,w
   189  0566  0A84               	incf	4,f
   190  0567  1903               	skipnz
   191  0568  0AFF               	incf	btemp+1,f
   192  0569  0008               	return
   193  056A                     stringcode:	
   194  056A                     stringdir:	
   195  056A  3005               	movlw	high stringdir
   196  056B  008A               	movwf	10
   197  056C  0804               	movf	4,w
   198  056D  0A84               	incf	4,f
   199  056E  0782               	addwf	2,f
   200  056F                     __stringbase:	
   201  056F  3400               	retlw	0
   202  0570                     __end_of__stringtab:	
   203  0570                     _dpowers:	
   204  0570  3401               	retlw	1
   205  0571  3400               	retlw	0
   206  0572  340A               	retlw	10
   207  0573  3400               	retlw	0
   208  0574  3464               	retlw	100
   209  0575  3400               	retlw	0
   210  0576  34E8               	retlw	232
   211  0577  3403               	retlw	3
   212  0578  3410               	retlw	16
   213  0579  3427               	retlw	39
   214  057A                     __end_of_dpowers:	
   215  0010                     _T1CON	set	16
   216  0006                     _PORTB	set	6
   217  000F                     _TMR1H	set	15
   218  000E                     _TMR1L	set	14
   219  0019                     _TXREG	set	25
   220  001A                     _RCREG	set	26
   221  0033                     _RB3	set	51
   222  0032                     _RB2	set	50
   223  0031                     _RB1	set	49
   224  005F                     _GIE	set	95
   225  0080                     _TMR1ON	set	128
   226  0034                     _RB4	set	52
   227  005B                     _RBIE	set	91
   228  0058                     _RBIF	set	88
   229  0065                     _RCIF	set	101
   230  00C4                     _CREN	set	196
   231  00C7                     _SPEN	set	199
   232  0086                     _TRISB	set	134
   233  0099                     _SPBRG	set	153
   234  04C1                     _TRMT	set	1217
   235  04C5                     _TXEN	set	1221
   236  043E                     _TRISC6	set	1086
   237  043F                     _TRISC7	set	1087
   238  04C4                     _SYNC	set	1220
   239  04C2                     _BRGH	set	1218
   240  057A                     STR_1:	
   241  057A  3453               	retlw	83	;'S'
   242  057B  3465               	retlw	101	;'e'
   243  057C  346E               	retlw	110	;'n'
   244  057D  3473               	retlw	115	;'s'
   245  057E  346F               	retlw	111	;'o'
   246  057F  3472               	retlw	114	;'r'
   247  0580  3420               	retlw	32	;' '
   248  0581  3455               	retlw	85	;'U'
   249  0582  346C               	retlw	108	;'l'
   250  0583  3474               	retlw	116	;'t'
   251  0584  3472               	retlw	114	;'r'
   252  0585  3461               	retlw	97	;'a'
   253  0586  3473               	retlw	115	;'s'
   254  0587  346F               	retlw	111	;'o'
   255  0588  346E               	retlw	110	;'n'
   256  0589  3469               	retlw	105	;'i'
   257  058A  3463               	retlw	99	;'c'
   258  058B  346F               	retlw	111	;'o'
   259  058C  3400               	retlw	0
   260  058D                     STR_2:	
   261  058D  3425               	retlw	37	;'%'
   262  058E  3464               	retlw	100	;'d'
   263  058F  3400               	retlw	0
   264  058D                     
   265                           ; #config settings
   266  0000                     
   267                           	psect	cinit
   268  0013                     start_initialization:	
   269  0013                     __initialization:	
   270                           
   271                           ; Clear objects allocated to BANK0
   272  0013  1283               	bcf	3,5	;RP0=0, select bank0
   273  0014  1303               	bcf	3,6	;RP1=0, select bank0
   274  0015  01C4               	clrf	__pbssBANK0& (0+127)
   275  0016  01C5               	clrf	(__pbssBANK0+1)& (0+127)
   276  0017  01C6               	clrf	(__pbssBANK0+2)& (0+127)
   277  0018  01C7               	clrf	(__pbssBANK0+3)& (0+127)
   278  0019  01C8               	clrf	(__pbssBANK0+4)& (0+127)
   279  001A  01C9               	clrf	(__pbssBANK0+5)& (0+127)
   280  001B  01CA               	clrf	(__pbssBANK0+6)& (0+127)
   281  001C  01CB               	clrf	(__pbssBANK0+7)& (0+127)
   282  001D  01CC               	clrf	(__pbssBANK0+8)& (0+127)
   283  001E  01CD               	clrf	(__pbssBANK0+9)& (0+127)
   284  001F                     end_of_initialization:	
   285                           ;End of C runtime variable initialization code
   286                           
   287  001F                     __end_of__initialization:	
   288  001F  0183               	clrf	3
   289  0020  120A  118A  2823   	ljmp	_main	;jump to C main() function
   290                           
   291                           	psect	bssBANK0
   292  0044                     __pbssBANK0:	
   293  0044                     _d:	
   294  0044                     	ds	2
   295  0046                     _buffer:	
   296  0046                     	ds	8
   297                           
   298                           	psect	cstackCOMMON
   299  0070                     __pcstackCOMMON:	
   300  0070                     ?_UART_Write:	
   301  0070                     ?_echo:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_main:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?___awdiv:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ___awdiv@divisor:	
   311                           ; 2 bytes @ 0x0
   312                           
   313                           
   314                           ; 2 bytes @ 0x0
   315  0070                     	ds	2
   316  0072                     ___awdiv@dividend:	
   317                           
   318                           ; 2 bytes @ 0x2
   319  0072                     	ds	2
   320  0074                     ??___awdiv:	
   321                           
   322                           ; 1 bytes @ 0x4
   323  0074                     	ds	1
   324  0075                     ___awdiv@counter:	
   325                           
   326                           ; 1 bytes @ 0x5
   327  0075                     	ds	1
   328  0076                     ___awdiv@sign:	
   329                           
   330                           ; 1 bytes @ 0x6
   331  0076                     	ds	1
   332  0077                     ___awdiv@quotient:	
   333                           
   334                           ; 2 bytes @ 0x7
   335  0077                     	ds	2
   336  0079                     ??_echo:	
   337                           
   338                           ; 1 bytes @ 0x9
   339  0079                     	ds	5
   340                           
   341                           	psect	cstackBANK0
   342  0020                     __pcstackBANK0:	
   343  0020                     ??_UART_Write:	
   344  0020                     ?___lwdiv:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0020                     ?___aldiv:	
   348                           ; 2 bytes @ 0x0
   349                           
   350  0020                     UART_Write@data:	
   351                           ; 4 bytes @ 0x0
   352                           
   353  0020                     ___lwdiv@divisor:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0020                     ___aldiv@divisor:	
   357                           ; 2 bytes @ 0x0
   358                           
   359                           
   360                           ; 4 bytes @ 0x0
   361  0020                     	ds	1
   362  0021                     ?_UART_Write_Text:	
   363  0021                     UART_Write_Text@text:	
   364                           ; 1 bytes @ 0x1
   365                           
   366                           
   367                           ; 2 bytes @ 0x1
   368  0021                     	ds	1
   369  0022                     ___lwdiv@dividend:	
   370                           
   371                           ; 2 bytes @ 0x2
   372  0022                     	ds	1
   373  0023                     ??_UART_Write_Text:	
   374                           
   375                           ; 1 bytes @ 0x3
   376  0023                     	ds	1
   377  0024                     ??___lwdiv:	
   378  0024                     ___aldiv@dividend:	
   379                           ; 1 bytes @ 0x4
   380                           
   381                           
   382                           ; 4 bytes @ 0x4
   383  0024                     	ds	1
   384  0025                     ___lwdiv@quotient:	
   385                           
   386                           ; 2 bytes @ 0x5
   387  0025                     	ds	1
   388  0026                     UART_Write_Text@i:	
   389                           
   390                           ; 2 bytes @ 0x6
   391  0026                     	ds	1
   392  0027                     ___lwdiv@counter:	
   393                           
   394                           ; 1 bytes @ 0x7
   395  0027                     	ds	1
   396  0028                     ??___aldiv:	
   397  0028                     ?___lwmod:	
   398                           ; 1 bytes @ 0x8
   399                           
   400  0028                     ___lwmod@divisor:	
   401                           ; 2 bytes @ 0x8
   402                           
   403                           
   404                           ; 2 bytes @ 0x8
   405  0028                     	ds	1
   406  0029                     ___aldiv@counter:	
   407                           
   408                           ; 1 bytes @ 0x9
   409  0029                     	ds	1
   410  002A                     ___aldiv@sign:	
   411  002A                     ___lwmod@dividend:	
   412                           ; 1 bytes @ 0xA
   413                           
   414                           
   415                           ; 2 bytes @ 0xA
   416  002A                     	ds	1
   417  002B                     ___aldiv@quotient:	
   418                           
   419                           ; 4 bytes @ 0xB
   420  002B                     	ds	1
   421  002C                     ??___lwmod:	
   422                           
   423                           ; 1 bytes @ 0xC
   424  002C                     	ds	1
   425  002D                     ___lwmod@counter:	
   426                           
   427                           ; 1 bytes @ 0xD
   428  002D                     	ds	1
   429  002E                     ?_sprintf:	
   430  002E                     sprintf@f:	
   431                           ; 2 bytes @ 0xE
   432                           
   433                           
   434                           ; 1 bytes @ 0xE
   435  002E                     	ds	1
   436  002F                     ?_UART_Init:	
   437  002F                     UART_Init@baudrate:	
   438                           ; 1 bytes @ 0xF
   439                           
   440                           
   441                           ; 4 bytes @ 0xF
   442  002F                     	ds	2
   443  0031                     ??_sprintf:	
   444                           
   445                           ; 1 bytes @ 0x11
   446  0031                     	ds	2
   447  0033                     ??_UART_Init:	
   448                           
   449                           ; 1 bytes @ 0x13
   450  0033                     	ds	1
   451  0034                     sprintf@ap:	
   452                           
   453                           ; 1 bytes @ 0x14
   454  0034                     	ds	1
   455  0035                     sprintf@flag:	
   456                           
   457                           ; 1 bytes @ 0x15
   458  0035                     	ds	1
   459  0036                     sprintf@prec:	
   460                           
   461                           ; 1 bytes @ 0x16
   462  0036                     	ds	1
   463  0037                     sprintf@val:	
   464                           
   465                           ; 2 bytes @ 0x17
   466  0037                     	ds	2
   467  0039                     sprintf@sp:	
   468                           
   469                           ; 1 bytes @ 0x19
   470  0039                     	ds	1
   471  003A                     sprintf@c:	
   472                           
   473                           ; 1 bytes @ 0x1A
   474  003A                     	ds	5
   475  003F                     UART_Init@x:	
   476                           
   477                           ; 2 bytes @ 0x1F
   478  003F                     	ds	2
   479  0041                     ??_main:	
   480                           
   481                           ; 1 bytes @ 0x21
   482  0041                     	ds	3
   483                           
   484                           	psect	maintext
   485  0023                     __pmaintext:	
   486 ;;
   487 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   488 ;;
   489 ;; *************** function _main *****************
   490 ;; Defined at:
   491 ;;		line 52 in file "sr04_serial_v02.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;		None
   494 ;; Auto vars:     Size  Location     Type
   495 ;;		None
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      void 
   498 ;; Registers used:
   499 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : B00/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   505 ;;      Params:         0       0       0       0       0
   506 ;;      Locals:         0       0       0       0       0
   507 ;;      Temps:          0       3       0       0       0
   508 ;;      Totals:         0       3       0       0       0
   509 ;;Total ram usage:        3 bytes
   510 ;; Hardware stack levels required when called:    4
   511 ;; This function calls:
   512 ;;		_UART_Init
   513 ;;		_UART_Write
   514 ;;		_UART_Write_Text
   515 ;;		_sprintf
   516 ;; This function is called by:
   517 ;;		Startup code after reset
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           
   522                           ;psect for function _main
   523  0023                     _main:	
   524  0023                     l1357:	
   525                           ;incstack = 0
   526                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   527                           
   528                           
   529                           ;sr04_serial_v02.c: 53:     PORTB = 0;
   530  0023  1283               	bcf	3,5	;RP0=0, select bank0
   531  0024  1303               	bcf	3,6	;RP1=0, select bank0
   532  0025  0186               	clrf	6	;volatile
   533  0026                     l1359:	
   534                           
   535                           ;sr04_serial_v02.c: 54:     TRISB = 0b00010000;
   536  0026  3010               	movlw	16
   537  0027  1683               	bsf	3,5	;RP0=1, select bank1
   538  0028  1303               	bcf	3,6	;RP1=0, select bank1
   539  0029  0086               	movwf	6	;volatile
   540  002A                     l1361:	
   541                           
   542                           ;sr04_serial_v02.c: 56:     GIE = 1;
   543  002A  178B               	bsf	11,7	;volatile
   544  002B                     l1363:	
   545                           
   546                           ;sr04_serial_v02.c: 57:     RBIF = 0;
   547  002B  100B               	bcf	11,0	;volatile
   548  002C                     l1365:	
   549                           
   550                           ;sr04_serial_v02.c: 58:     RBIE = 1;
   551  002C  158B               	bsf	11,3	;volatile
   552  002D                     l1367:	
   553                           
   554                           ;sr04_serial_v02.c: 60:     UART_Init(9600);
   555  002D  3000               	movlw	0
   556  002E  1283               	bcf	3,5	;RP0=0, select bank0
   557  002F  1303               	bcf	3,6	;RP1=0, select bank0
   558  0030  00B2               	movwf	UART_Init@baudrate+3
   559  0031  3000               	movlw	0
   560  0032  00B1               	movwf	UART_Init@baudrate+2
   561  0033  3025               	movlw	37
   562  0034  00B0               	movwf	UART_Init@baudrate+1
   563  0035  3080               	movlw	128
   564  0036  00AF               	movwf	UART_Init@baudrate
   565  0037  120A  118A  2283  120A  118A  	fcall	_UART_Init
   566  003C                     l1369:	
   567                           
   568                           ;sr04_serial_v02.c: 61:     UART_Write_Text("Sensor Ultrasonico");
   569  003C  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   570  003D  1283               	bcf	3,5	;RP0=0, select bank0
   571  003E  1303               	bcf	3,6	;RP1=0, select bank0
   572  003F  00A1               	movwf	UART_Write_Text@text
   573  0040  3080               	movlw	128
   574  0041  00A2               	movwf	UART_Write_Text@text+1
   575  0042  120A  118A  24AA  120A  118A  	fcall	_UART_Write_Text
   576  0047                     l1371:	
   577                           
   578                           ;sr04_serial_v02.c: 62:     UART_Write('\n');
   579  0047  300A               	movlw	10
   580  0048  120A  118A  2590  120A  118A  	fcall	_UART_Write
   581  004D                     l1373:	
   582                           
   583                           ;sr04_serial_v02.c: 64:     T1CON = 0x10;
   584  004D  3010               	movlw	16
   585  004E  1283               	bcf	3,5	;RP0=0, select bank0
   586  004F  1303               	bcf	3,6	;RP1=0, select bank0
   587  0050  0090               	movwf	16	;volatile
   588  0051                     l1375:	
   589                           
   590                           ;sr04_serial_v02.c: 68:         TMR1H = 0;
   591  0051  1283               	bcf	3,5	;RP0=0, select bank0
   592  0052  1303               	bcf	3,6	;RP1=0, select bank0
   593  0053  018F               	clrf	15	;volatile
   594  0054                     l1377:	
   595                           
   596                           ;sr04_serial_v02.c: 69:         TMR1L = 0;
   597  0054  018E               	clrf	14	;volatile
   598  0055                     l1379:	
   599                           
   600                           ;sr04_serial_v02.c: 70:         d = 0;
   601  0055  01C4               	clrf	_d
   602  0056  01C5               	clrf	_d+1
   603  0057                     l1381:	
   604                           
   605                           ;sr04_serial_v02.c: 71:         RB1 = 1;
   606  0057  1486               	bsf	6,1	;volatile
   607  0058                     l1383:	
   608                           
   609                           ;sr04_serial_v02.c: 72:         _delay((unsigned long)((10)*(8000000/4000000.0)));
   610  0058  3005               	movlw	5
   611  0059  1283               	bcf	3,5	;RP0=0, select bank0
   612  005A  1303               	bcf	3,6	;RP1=0, select bank0
   613  005B  00C1               	movwf	??_main
   614  005C                     u1257:	
   615  005C  0BC1               	decfsz	??_main,f
   616  005D  285C               	goto	u1257
   617  005E  285F               	nop2
   618  005F                     l1385:	
   619                           
   620                           ;sr04_serial_v02.c: 73:         RB1 = 0;
   621  005F  1283               	bcf	3,5	;RP0=0, select bank0
   622  0060  1303               	bcf	3,6	;RP1=0, select bank0
   623  0061  1086               	bcf	6,1	;volatile
   624  0062                     l1387:	
   625                           
   626                           ;sr04_serial_v02.c: 74:         _delay((unsigned long)((50)*(8000000/4000.0)));
   627  0062  3082               	movlw	130
   628  0063  1283               	bcf	3,5	;RP0=0, select bank0
   629  0064  1303               	bcf	3,6	;RP1=0, select bank0
   630  0065  00C2               	movwf	??_main+1
   631  0066  30DD               	movlw	221
   632  0067  00C1               	movwf	??_main
   633  0068                     u1267:	
   634  0068  0BC1               	decfsz	??_main,f
   635  0069  2868               	goto	u1267
   636  006A  0BC2               	decfsz	??_main+1,f
   637  006B  2868               	goto	u1267
   638  006C                     l1389:	
   639                           
   640                           ;sr04_serial_v02.c: 76:         if (d > 0 && d < 400)
   641  006C  1283               	bcf	3,5	;RP0=0, select bank0
   642  006D  1303               	bcf	3,6	;RP1=0, select bank0
   643  006E  0845               	movf	_d+1,w
   644  006F  3A80               	xorlw	128
   645  0070  00FF               	movwf	btemp+1
   646  0071  3080               	movlw	128
   647  0072  027F               	subwf	btemp+1,w
   648  0073  1D03               	skipz
   649  0074  2877               	goto	u1195
   650  0075  3001               	movlw	1
   651  0076  0244               	subwf	_d,w
   652  0077                     u1195:	
   653  0077  1C03               	skipc
   654  0078  287A               	goto	u1191
   655  0079  287B               	goto	u1190
   656  007A                     u1191:	
   657  007A  28AC               	goto	l1397
   658  007B                     u1190:	
   659  007B                     l1391:	
   660  007B  1283               	bcf	3,5	;RP0=0, select bank0
   661  007C  1303               	bcf	3,6	;RP1=0, select bank0
   662  007D  0845               	movf	_d+1,w
   663  007E  3A80               	xorlw	128
   664  007F  00FF               	movwf	btemp+1
   665  0080  3081               	movlw	129
   666  0081  027F               	subwf	btemp+1,w
   667  0082  1D03               	skipz
   668  0083  2886               	goto	u1205
   669  0084  3090               	movlw	144
   670  0085  0244               	subwf	_d,w
   671  0086                     u1205:	
   672  0086  1803               	skipnc
   673  0087  2889               	goto	u1201
   674  0088  288A               	goto	u1200
   675  0089                     u1201:	
   676  0089  28AC               	goto	l1397
   677  008A                     u1200:	
   678  008A                     l1393:	
   679                           
   680                           ;sr04_serial_v02.c: 77:         {;sr04_serial_v02.c: 78:             sprintf(buffer, "%d
      +                          ", d);
   681  008A  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   682  008B  1283               	bcf	3,5	;RP0=0, select bank0
   683  008C  1303               	bcf	3,6	;RP1=0, select bank0
   684  008D  00C1               	movwf	??_main
   685  008E  0841               	movf	??_main,w
   686  008F  00AE               	movwf	sprintf@f
   687  0090  0845               	movf	_d+1,w
   688  0091  00B0               	movwf	?_sprintf+2
   689  0092  0844               	movf	_d,w
   690  0093  00AF               	movwf	?_sprintf+1
   691  0094  3046               	movlw	(low (_buffer| 0))& (0+255)
   692  0095  120A  118A  2199  120A  118A  	fcall	_sprintf
   693                           
   694                           ;sr04_serial_v02.c: 79:             UART_Write_Text(buffer);
   695  009A  3046               	movlw	(low (_buffer| 0))& (0+255)
   696  009B  1283               	bcf	3,5	;RP0=0, select bank0
   697  009C  1303               	bcf	3,6	;RP1=0, select bank0
   698  009D  00A1               	movwf	UART_Write_Text@text
   699  009E  3000               	movlw	0
   700  009F  00A2               	movwf	UART_Write_Text@text+1
   701  00A0  120A  118A  24AA  120A  118A  	fcall	_UART_Write_Text
   702  00A5                     l1395:	
   703                           
   704                           ;sr04_serial_v02.c: 80:             UART_Write(',');
   705  00A5  302C               	movlw	44
   706  00A6  120A  118A  2590  120A  118A  	fcall	_UART_Write
   707                           
   708                           ;sr04_serial_v02.c: 81:         } else {
   709  00AB  28B8               	goto	l1399
   710  00AC                     l1397:	
   711                           
   712                           ;sr04_serial_v02.c: 82:             UART_Write('0');
   713  00AC  3030               	movlw	48
   714  00AD  120A  118A  2590  120A  118A  	fcall	_UART_Write
   715                           
   716                           ;sr04_serial_v02.c: 83:             UART_Write(',');
   717  00B2  302C               	movlw	44
   718  00B3  120A  118A  2590  120A  118A  	fcall	_UART_Write
   719  00B8                     l1399:	
   720                           
   721                           ;sr04_serial_v02.c: 87:         TMR1H = 0;
   722  00B8  1283               	bcf	3,5	;RP0=0, select bank0
   723  00B9  1303               	bcf	3,6	;RP1=0, select bank0
   724  00BA  018F               	clrf	15	;volatile
   725  00BB                     l1401:	
   726                           
   727                           ;sr04_serial_v02.c: 88:         TMR1L = 0;
   728  00BB  018E               	clrf	14	;volatile
   729  00BC                     l1403:	
   730                           
   731                           ;sr04_serial_v02.c: 89:         d = 0;
   732  00BC  01C4               	clrf	_d
   733  00BD  01C5               	clrf	_d+1
   734  00BE                     l1405:	
   735                           
   736                           ;sr04_serial_v02.c: 90:         RB2 = 1;
   737  00BE  1506               	bsf	6,2	;volatile
   738  00BF                     l1407:	
   739                           
   740                           ;sr04_serial_v02.c: 91:         _delay((unsigned long)((10)*(8000000/4000000.0)));
   741  00BF  3005               	movlw	5
   742  00C0  1283               	bcf	3,5	;RP0=0, select bank0
   743  00C1  1303               	bcf	3,6	;RP1=0, select bank0
   744  00C2  00C1               	movwf	??_main
   745  00C3                     u1277:	
   746  00C3  0BC1               	decfsz	??_main,f
   747  00C4  28C3               	goto	u1277
   748  00C5  28C6               	nop2
   749  00C6                     l1409:	
   750                           
   751                           ;sr04_serial_v02.c: 92:         RB2 = 0;
   752  00C6  1283               	bcf	3,5	;RP0=0, select bank0
   753  00C7  1303               	bcf	3,6	;RP1=0, select bank0
   754  00C8  1106               	bcf	6,2	;volatile
   755  00C9                     l1411:	
   756                           
   757                           ;sr04_serial_v02.c: 93:         _delay((unsigned long)((50)*(8000000/4000.0)));
   758  00C9  3082               	movlw	130
   759  00CA  1283               	bcf	3,5	;RP0=0, select bank0
   760  00CB  1303               	bcf	3,6	;RP1=0, select bank0
   761  00CC  00C2               	movwf	??_main+1
   762  00CD  30DD               	movlw	221
   763  00CE  00C1               	movwf	??_main
   764  00CF                     u1287:	
   765  00CF  0BC1               	decfsz	??_main,f
   766  00D0  28CF               	goto	u1287
   767  00D1  0BC2               	decfsz	??_main+1,f
   768  00D2  28CF               	goto	u1287
   769  00D3                     l1413:	
   770                           
   771                           ;sr04_serial_v02.c: 95:         if (d > 0 && d < 400)
   772  00D3  1283               	bcf	3,5	;RP0=0, select bank0
   773  00D4  1303               	bcf	3,6	;RP1=0, select bank0
   774  00D5  0845               	movf	_d+1,w
   775  00D6  3A80               	xorlw	128
   776  00D7  00FF               	movwf	btemp+1
   777  00D8  3080               	movlw	128
   778  00D9  027F               	subwf	btemp+1,w
   779  00DA  1D03               	skipz
   780  00DB  28DE               	goto	u1215
   781  00DC  3001               	movlw	1
   782  00DD  0244               	subwf	_d,w
   783  00DE                     u1215:	
   784  00DE  1C03               	skipc
   785  00DF  28E1               	goto	u1211
   786  00E0  28E2               	goto	u1210
   787  00E1                     u1211:	
   788  00E1  2913               	goto	l1421
   789  00E2                     u1210:	
   790  00E2                     l1415:	
   791  00E2  1283               	bcf	3,5	;RP0=0, select bank0
   792  00E3  1303               	bcf	3,6	;RP1=0, select bank0
   793  00E4  0845               	movf	_d+1,w
   794  00E5  3A80               	xorlw	128
   795  00E6  00FF               	movwf	btemp+1
   796  00E7  3081               	movlw	129
   797  00E8  027F               	subwf	btemp+1,w
   798  00E9  1D03               	skipz
   799  00EA  28ED               	goto	u1225
   800  00EB  3090               	movlw	144
   801  00EC  0244               	subwf	_d,w
   802  00ED                     u1225:	
   803  00ED  1803               	skipnc
   804  00EE  28F0               	goto	u1221
   805  00EF  28F1               	goto	u1220
   806  00F0                     u1221:	
   807  00F0  2913               	goto	l1421
   808  00F1                     u1220:	
   809  00F1                     l1417:	
   810                           
   811                           ;sr04_serial_v02.c: 96:         {;sr04_serial_v02.c: 97:             sprintf(buffer, "%d
      +                          ", d);
   812  00F1  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   813  00F2  1283               	bcf	3,5	;RP0=0, select bank0
   814  00F3  1303               	bcf	3,6	;RP1=0, select bank0
   815  00F4  00C1               	movwf	??_main
   816  00F5  0841               	movf	??_main,w
   817  00F6  00AE               	movwf	sprintf@f
   818  00F7  0845               	movf	_d+1,w
   819  00F8  00B0               	movwf	?_sprintf+2
   820  00F9  0844               	movf	_d,w
   821  00FA  00AF               	movwf	?_sprintf+1
   822  00FB  3046               	movlw	(low (_buffer| 0))& (0+255)
   823  00FC  120A  118A  2199  120A  118A  	fcall	_sprintf
   824                           
   825                           ;sr04_serial_v02.c: 98:             UART_Write_Text(buffer);
   826  0101  3046               	movlw	(low (_buffer| 0))& (0+255)
   827  0102  1283               	bcf	3,5	;RP0=0, select bank0
   828  0103  1303               	bcf	3,6	;RP1=0, select bank0
   829  0104  00A1               	movwf	UART_Write_Text@text
   830  0105  3000               	movlw	0
   831  0106  00A2               	movwf	UART_Write_Text@text+1
   832  0107  120A  118A  24AA  120A  118A  	fcall	_UART_Write_Text
   833  010C                     l1419:	
   834                           
   835                           ;sr04_serial_v02.c: 99:             UART_Write(',');
   836  010C  302C               	movlw	44
   837  010D  120A  118A  2590  120A  118A  	fcall	_UART_Write
   838                           
   839                           ;sr04_serial_v02.c: 100:         } else {
   840  0112  291F               	goto	l1423
   841  0113                     l1421:	
   842                           
   843                           ;sr04_serial_v02.c: 101:             UART_Write('0');
   844  0113  3030               	movlw	48
   845  0114  120A  118A  2590  120A  118A  	fcall	_UART_Write
   846                           
   847                           ;sr04_serial_v02.c: 102:             UART_Write(',');
   848  0119  302C               	movlw	44
   849  011A  120A  118A  2590  120A  118A  	fcall	_UART_Write
   850  011F                     l1423:	
   851                           
   852                           ;sr04_serial_v02.c: 106:         TMR1H = 0;
   853  011F  1283               	bcf	3,5	;RP0=0, select bank0
   854  0120  1303               	bcf	3,6	;RP1=0, select bank0
   855  0121  018F               	clrf	15	;volatile
   856  0122                     l1425:	
   857                           
   858                           ;sr04_serial_v02.c: 107:         TMR1L = 0;
   859  0122  018E               	clrf	14	;volatile
   860  0123                     l1427:	
   861                           
   862                           ;sr04_serial_v02.c: 108:         d = 0;
   863  0123  01C4               	clrf	_d
   864  0124  01C5               	clrf	_d+1
   865  0125                     l1429:	
   866                           
   867                           ;sr04_serial_v02.c: 109:         RB3 = 1;
   868  0125  1586               	bsf	6,3	;volatile
   869  0126                     l1431:	
   870                           
   871                           ;sr04_serial_v02.c: 110:         _delay((unsigned long)((10)*(8000000/4000000.0)));
   872  0126  3005               	movlw	5
   873  0127  1283               	bcf	3,5	;RP0=0, select bank0
   874  0128  1303               	bcf	3,6	;RP1=0, select bank0
   875  0129  00C1               	movwf	??_main
   876  012A                     u1297:	
   877  012A  0BC1               	decfsz	??_main,f
   878  012B  292A               	goto	u1297
   879  012C  292D               	nop2
   880  012D                     l1433:	
   881                           
   882                           ;sr04_serial_v02.c: 111:         RB3 = 0;
   883  012D  1283               	bcf	3,5	;RP0=0, select bank0
   884  012E  1303               	bcf	3,6	;RP1=0, select bank0
   885  012F  1186               	bcf	6,3	;volatile
   886  0130                     l1435:	
   887                           
   888                           ;sr04_serial_v02.c: 112:         _delay((unsigned long)((50)*(8000000/4000.0)));
   889  0130  3082               	movlw	130
   890  0131  1283               	bcf	3,5	;RP0=0, select bank0
   891  0132  1303               	bcf	3,6	;RP1=0, select bank0
   892  0133  00C2               	movwf	??_main+1
   893  0134  30DD               	movlw	221
   894  0135  00C1               	movwf	??_main
   895  0136                     u1307:	
   896  0136  0BC1               	decfsz	??_main,f
   897  0137  2936               	goto	u1307
   898  0138  0BC2               	decfsz	??_main+1,f
   899  0139  2936               	goto	u1307
   900  013A                     l1437:	
   901                           
   902                           ;sr04_serial_v02.c: 114:         if (d > 0 && d < 400)
   903  013A  1283               	bcf	3,5	;RP0=0, select bank0
   904  013B  1303               	bcf	3,6	;RP1=0, select bank0
   905  013C  0845               	movf	_d+1,w
   906  013D  3A80               	xorlw	128
   907  013E  00FF               	movwf	btemp+1
   908  013F  3080               	movlw	128
   909  0140  027F               	subwf	btemp+1,w
   910  0141  1D03               	skipz
   911  0142  2945               	goto	u1235
   912  0143  3001               	movlw	1
   913  0144  0244               	subwf	_d,w
   914  0145                     u1235:	
   915  0145  1C03               	skipc
   916  0146  2948               	goto	u1231
   917  0147  2949               	goto	u1230
   918  0148                     u1231:	
   919  0148  297A               	goto	l1445
   920  0149                     u1230:	
   921  0149                     l1439:	
   922  0149  1283               	bcf	3,5	;RP0=0, select bank0
   923  014A  1303               	bcf	3,6	;RP1=0, select bank0
   924  014B  0845               	movf	_d+1,w
   925  014C  3A80               	xorlw	128
   926  014D  00FF               	movwf	btemp+1
   927  014E  3081               	movlw	129
   928  014F  027F               	subwf	btemp+1,w
   929  0150  1D03               	skipz
   930  0151  2954               	goto	u1245
   931  0152  3090               	movlw	144
   932  0153  0244               	subwf	_d,w
   933  0154                     u1245:	
   934  0154  1803               	skipnc
   935  0155  2957               	goto	u1241
   936  0156  2958               	goto	u1240
   937  0157                     u1241:	
   938  0157  297A               	goto	l1445
   939  0158                     u1240:	
   940  0158                     l1441:	
   941                           
   942                           ;sr04_serial_v02.c: 115:         {;sr04_serial_v02.c: 116:             sprintf(buffer, "
      +                          %d", d);
   943  0158  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   944  0159  1283               	bcf	3,5	;RP0=0, select bank0
   945  015A  1303               	bcf	3,6	;RP1=0, select bank0
   946  015B  00C1               	movwf	??_main
   947  015C  0841               	movf	??_main,w
   948  015D  00AE               	movwf	sprintf@f
   949  015E  0845               	movf	_d+1,w
   950  015F  00B0               	movwf	?_sprintf+2
   951  0160  0844               	movf	_d,w
   952  0161  00AF               	movwf	?_sprintf+1
   953  0162  3046               	movlw	(low (_buffer| 0))& (0+255)
   954  0163  120A  118A  2199  120A  118A  	fcall	_sprintf
   955                           
   956                           ;sr04_serial_v02.c: 117:             UART_Write_Text(buffer);
   957  0168  3046               	movlw	(low (_buffer| 0))& (0+255)
   958  0169  1283               	bcf	3,5	;RP0=0, select bank0
   959  016A  1303               	bcf	3,6	;RP1=0, select bank0
   960  016B  00A1               	movwf	UART_Write_Text@text
   961  016C  3000               	movlw	0
   962  016D  00A2               	movwf	UART_Write_Text@text+1
   963  016E  120A  118A  24AA  120A  118A  	fcall	_UART_Write_Text
   964  0173                     l1443:	
   965                           
   966                           ;sr04_serial_v02.c: 118:             UART_Write('\n');
   967  0173  300A               	movlw	10
   968  0174  120A  118A  2590  120A  118A  	fcall	_UART_Write
   969                           
   970                           ;sr04_serial_v02.c: 119:         } else {
   971  0179  2986               	goto	l1447
   972  017A                     l1445:	
   973                           
   974                           ;sr04_serial_v02.c: 120:             UART_Write('0');
   975  017A  3030               	movlw	48
   976  017B  120A  118A  2590  120A  118A  	fcall	_UART_Write
   977                           
   978                           ;sr04_serial_v02.c: 121:             UART_Write('\n');
   979  0180  300A               	movlw	10
   980  0181  120A  118A  2590  120A  118A  	fcall	_UART_Write
   981  0186                     l1447:	
   982                           
   983                           ;sr04_serial_v02.c: 124:         _delay((unsigned long)((350)*(8000000/4000.0)));
   984  0186  3004               	movlw	4
   985  0187  1283               	bcf	3,5	;RP0=0, select bank0
   986  0188  1303               	bcf	3,6	;RP1=0, select bank0
   987  0189  00C3               	movwf	??_main+2
   988  018A  308E               	movlw	142
   989  018B  00C2               	movwf	??_main+1
   990  018C  3011               	movlw	17
   991  018D  00C1               	movwf	??_main
   992  018E                     u1317:	
   993  018E  0BC1               	decfsz	??_main,f
   994  018F  298E               	goto	u1317
   995  0190  0BC2               	decfsz	??_main+1,f
   996  0191  298E               	goto	u1317
   997  0192  0BC3               	decfsz	??_main+2,f
   998  0193  298E               	goto	u1317
   999  0194  2995               	nop2
  1000  0195  2851               	goto	l1375
  1001  0196  120A  118A  2810   	ljmp	start
  1002  0199                     __end_of_main:	
  1003                           
  1004                           	psect	text1
  1005  0199                     __ptext1:	
  1006 ;; *************** function _sprintf *****************
  1007 ;; Defined at:
  1008 ;;		line 505 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;  sp              1    wreg     PTR unsigned char 
  1011 ;;		 -> buffer(8), 
  1012 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  1013 ;;		 -> STR_4(3), STR_3(3), STR_2(3), 
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  sp              1   25[BANK0 ] PTR unsigned char 
  1016 ;;		 -> buffer(8), 
  1017 ;;  tmpval          4    0        struct .
  1018 ;;  val             2   23[BANK0 ] unsigned int 
  1019 ;;  cp              2    0        PTR const unsigned char 
  1020 ;;  len             2    0        unsigned int 
  1021 ;;  c               1   26[BANK0 ] unsigned char 
  1022 ;;  prec            1   22[BANK0 ] char 
  1023 ;;  flag            1   21[BANK0 ] unsigned char 
  1024 ;;  ap              1   20[BANK0 ] PTR void [1]
  1025 ;;		 -> ?_sprintf(2), 
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  2   14[BANK0 ] int 
  1028 ;; Registers used:
  1029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1035 ;;      Params:         0       3       0       0       0
  1036 ;;      Locals:         0       7       0       0       0
  1037 ;;      Temps:          0       3       0       0       0
  1038 ;;      Totals:         0      13       0       0       0
  1039 ;;Total ram usage:       13 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:    3
  1042 ;; This function calls:
  1043 ;;		___lwdiv
  1044 ;;		___lwmod
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           
  1051                           ;psect for function _sprintf
  1052  0199                     _sprintf:	
  1053                           
  1054                           ;incstack = 0
  1055                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1056                           ;sprintf@sp stored from wreg
  1057  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1058  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1059  019B  00B9               	movwf	sprintf@sp
  1060  019C                     l1237:	
  1061                           
  1062                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 505: sprintf(char * sp, const
      +                           char * f, ...);/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 506: {;/opt/mi
      +                          crochip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 507:  va_list ap;;/opt/microchip/xc8/
      +                          v2.10/pic/sources/c90/common/doprnt.c: 512:  char c;;/opt/microchip/xc8/v2.10/pic/source
      +                          s/c90/common/doprnt.c: 521:  signed char prec;;/opt/microchip/xc8/v2.10/pic/sources/c90/
      +                          common/doprnt.c: 525:  unsigned char flag;;/opt/microchip/xc8/v2.10/pic/sources/c90/comm
      +                          on/doprnt.c: 543:  } tmpval;
  1063  019C  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1064  019D  00B1               	movwf	??_sprintf
  1065  019E  0831               	movf	??_sprintf,w
  1066  019F  00B4               	movwf	sprintf@ap
  1067                           
  1068                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 553:  while((c = *f++)) {
  1069  01A0  2A6C               	goto	l1289
  1070  01A1                     l1239:	
  1071                           
  1072                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 555:   if(c != '%')
  1073  01A1  3025               	movlw	37
  1074  01A2  063A               	xorwf	sprintf@c,w
  1075  01A3  1903               	btfsc	3,2
  1076  01A4  29A6               	goto	u991
  1077  01A5  29A7               	goto	u990
  1078  01A6                     u991:	
  1079  01A6  29B3               	goto	l1245
  1080  01A7                     u990:	
  1081  01A7                     l1241:	
  1082                           
  1083                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 557:   {;/opt/microchip/xc8/v
      +                          2.10/pic/sources/c90/common/doprnt.c: 558:    ((*sp++ = (c)));
  1084  01A7  083A               	movf	sprintf@c,w
  1085  01A8  00B1               	movwf	??_sprintf
  1086  01A9  0839               	movf	sprintf@sp,w
  1087  01AA  0084               	movwf	4
  1088  01AB  0831               	movf	??_sprintf,w
  1089  01AC  1383               	bcf	3,7	;select IRP bank0
  1090  01AD  0080               	movwf	0
  1091  01AE                     l1243:	
  1092  01AE  3001               	movlw	1
  1093  01AF  00B1               	movwf	??_sprintf
  1094  01B0  0831               	movf	??_sprintf,w
  1095  01B1  07B9               	addwf	sprintf@sp,f
  1096                           
  1097                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 559:    continue;
  1098  01B2  2A6C               	goto	l1289
  1099  01B3                     l1245:	
  1100                           
  1101                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 565:   flag = 0;
  1102  01B3  01B5               	clrf	sprintf@flag
  1103  01B4                     l1249:	
  1104                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 661:   switch(c = *f++) {
  1105                           
  1106  01B4  3001               	movlw	1
  1107  01B5  07AE               	addwf	sprintf@f,f
  1108  01B6  30FF               	movlw	-1
  1109  01B7  072E               	addwf	sprintf@f,w
  1110  01B8  0084               	movwf	4
  1111  01B9  120A  118A  256A  120A  118A  	fcall	stringdir
  1112  01BE  00BA               	movwf	sprintf@c
  1113  01BF  00B1               	movwf	??_sprintf
  1114  01C0  01B2               	clrf	??_sprintf+1
  1115                           
  1116                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1117                           ; Switch size 1, requested type "simple"
  1118                           ; Number of cases is 1, Range of values is 0 to 0
  1119                           ; switch strategies available:
  1120                           ; Name         Instructions Cycles
  1121                           ; simple_byte            4     3 (average)
  1122                           ; direct_byte           11     8 (fixed)
  1123                           ; jumptable            260     6 (fixed)
  1124                           ;	Chosen strategy is simple_byte
  1125  01C1  0832               	movf	??_sprintf+1,w
  1126  01C2  3A00               	xorlw	0	; case 0
  1127  01C3  1903               	skipnz
  1128  01C4  29C6               	goto	l1469
  1129  01C5  2A6C               	goto	l1289
  1130  01C6                     l1469:	
  1131                           
  1132                           ; Switch size 1, requested type "simple"
  1133                           ; Number of cases is 3, Range of values is 0 to 105
  1134                           ; switch strategies available:
  1135                           ; Name         Instructions Cycles
  1136                           ; simple_byte           10     6 (average)
  1137                           ; jumptable            260     6 (fixed)
  1138                           ;	Chosen strategy is simple_byte
  1139  01C6  0831               	movf	??_sprintf,w
  1140  01C7  3A00               	xorlw	0	; case 0
  1141  01C8  1903               	skipnz
  1142  01C9  2A7E               	goto	l1291
  1143  01CA  3A64               	xorlw	100	; case 100
  1144  01CB  1903               	skipnz
  1145  01CC  29D1               	goto	l1251
  1146  01CD  3A0D               	xorlw	13	; case 105
  1147  01CE  1903               	skipnz
  1148  01CF  29D1               	goto	l1251
  1149  01D0  2A6C               	goto	l1289
  1150  01D1                     l1251:	
  1151                           
  1152                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1279:   {;/opt/microchip/xc8/
      +                          v2.10/pic/sources/c90/common/doprnt.c: 1285:     val = (unsigned int)(*(int *)__va_arg((
      +                          *(int **)ap), (int)0));
  1153  01D1  0834               	movf	sprintf@ap,w
  1154  01D2  0084               	movwf	4
  1155  01D3  1383               	bcf	3,7	;select IRP bank0
  1156  01D4  0800               	movf	0,w
  1157  01D5  00B7               	movwf	sprintf@val
  1158  01D6  0A84               	incf	4,f
  1159  01D7  0800               	movf	0,w
  1160  01D8  00B8               	movwf	sprintf@val+1
  1161  01D9                     l1253:	
  1162  01D9  3002               	movlw	2
  1163  01DA  00B1               	movwf	??_sprintf
  1164  01DB  0831               	movf	??_sprintf,w
  1165  01DC  07B4               	addwf	sprintf@ap,f
  1166  01DD                     l1255:	
  1167                           
  1168                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1287:    if((int)val < 0) {
  1169  01DD  1FB8               	btfss	sprintf@val+1,7
  1170  01DE  29E0               	goto	u1001
  1171  01DF  29E1               	goto	u1000
  1172  01E0                     u1001:	
  1173  01E0  29EA               	goto	l1261
  1174  01E1                     u1000:	
  1175  01E1                     l1257:	
  1176                           
  1177                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1288:     flag |= 0x03;
  1178  01E1  3003               	movlw	3
  1179  01E2  00B1               	movwf	??_sprintf
  1180  01E3  0831               	movf	??_sprintf,w
  1181  01E4  04B5               	iorwf	sprintf@flag,f
  1182  01E5                     l1259:	
  1183                           
  1184                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1289:     val = -val;
  1185  01E5  09B7               	comf	sprintf@val,f
  1186  01E6  09B8               	comf	sprintf@val+1,f
  1187  01E7  0AB7               	incf	sprintf@val,f
  1188  01E8  1903               	skipnz
  1189  01E9  0AB8               	incf	sprintf@val+1,f
  1190  01EA                     l1261:	
  1191                           
  1192                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1292:   };/opt/microchip/xc8/
      +                          v2.10/pic/sources/c90/common/doprnt.c: 1331:    for(c = 1 ; c != sizeof dpowers/sizeof d
      +                          powers[0] ; c++)
  1193  01EA  01BA               	clrf	sprintf@c
  1194  01EB  0ABA               	incf	sprintf@c,f
  1195  01EC                     l1267:	
  1196                           
  1197                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1332:     if(val < dpowers[c]
      +                          )
  1198  01EC  083A               	movf	sprintf@c,w
  1199  01ED  00B1               	movwf	??_sprintf
  1200  01EE  0731               	addwf	??_sprintf,w
  1201  01EF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1202  01F0  0084               	movwf	4
  1203  01F1  120A  118A  256A  120A  118A  	fcall	stringdir
  1204  01F6  00B2               	movwf	??_sprintf+1
  1205  01F7  120A  118A  256A  120A  118A  	fcall	stringdir
  1206  01FC  00B3               	movwf	??_sprintf+2
  1207  01FD  0833               	movf	??_sprintf+2,w
  1208  01FE  0238               	subwf	sprintf@val+1,w
  1209  01FF  1D03               	skipz
  1210  0200  2A03               	goto	u1015
  1211  0201  0832               	movf	??_sprintf+1,w
  1212  0202  0237               	subwf	sprintf@val,w
  1213  0203                     u1015:	
  1214  0203  1803               	skipnc
  1215  0204  2A06               	goto	u1011
  1216  0205  2A07               	goto	u1010
  1217  0206                     u1011:	
  1218  0206  2A08               	goto	l1271
  1219  0207                     u1010:	
  1220  0207  2A12               	goto	l1273
  1221  0208                     l1271:	
  1222  0208  3001               	movlw	1
  1223  0209  00B1               	movwf	??_sprintf
  1224  020A  0831               	movf	??_sprintf,w
  1225  020B  07BA               	addwf	sprintf@c,f
  1226  020C  3005               	movlw	5
  1227  020D  063A               	xorwf	sprintf@c,w
  1228  020E  1D03               	btfss	3,2
  1229  020F  2A11               	goto	u1021
  1230  0210  2A12               	goto	u1020
  1231  0211                     u1021:	
  1232  0211  29EC               	goto	l1267
  1233  0212                     u1020:	
  1234  0212                     l1273:	
  1235                           
  1236                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1448:   {;/opt/microchip/xc8/
      +                          v2.10/pic/sources/c90/common/doprnt.c: 1464:    if(flag & 0x03)
  1237  0212  0835               	movf	sprintf@flag,w
  1238  0213  3903               	andlw	3
  1239  0214  1903               	btfsc	3,2
  1240  0215  2A17               	goto	u1031
  1241  0216  2A18               	goto	u1030
  1242  0217                     u1031:	
  1243  0217  2A23               	goto	l1279
  1244  0218                     u1030:	
  1245  0218                     l1275:	
  1246                           
  1247                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1465:     ((*sp++ = ('-')));
  1248  0218  302D               	movlw	45
  1249  0219  00B1               	movwf	??_sprintf
  1250  021A  0839               	movf	sprintf@sp,w
  1251  021B  0084               	movwf	4
  1252  021C  0831               	movf	??_sprintf,w
  1253  021D  1383               	bcf	3,7	;select IRP bank0
  1254  021E  0080               	movwf	0
  1255  021F                     l1277:	
  1256  021F  3001               	movlw	1
  1257  0220  00B1               	movwf	??_sprintf
  1258  0221  0831               	movf	??_sprintf,w
  1259  0222  07B9               	addwf	sprintf@sp,f
  1260  0223                     l1279:	
  1261                           
  1262                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1495:   };/opt/microchip/xc8/
      +                          v2.10/pic/sources/c90/common/doprnt.c: 1498:   prec = c;
  1263  0223  083A               	movf	sprintf@c,w
  1264  0224  00B1               	movwf	??_sprintf
  1265  0225  0831               	movf	??_sprintf,w
  1266  0226  00B6               	movwf	sprintf@prec
  1267                           
  1268                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1500:   while(prec--) {
  1269  0227  2A63               	goto	l1287
  1270  0228                     l1281:	
  1271                           
  1272                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1504:    {;/opt/microchip/xc8
      +                          /v2.10/pic/sources/c90/common/doprnt.c: 1515:     c = (val / dpowers[(unsigned char)prec
      +                          ]) % 10 + '0';
  1273  0228  300A               	movlw	10
  1274  0229  00A8               	movwf	___lwmod@divisor
  1275  022A  3000               	movlw	0
  1276  022B  00A9               	movwf	___lwmod@divisor+1
  1277  022C  0836               	movf	sprintf@prec,w
  1278  022D  00B1               	movwf	??_sprintf
  1279  022E  0731               	addwf	??_sprintf,w
  1280  022F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1281  0230  0084               	movwf	4
  1282  0231  120A  118A  256A  120A  118A  	fcall	stringdir
  1283  0236  00A0               	movwf	___lwdiv@divisor
  1284  0237  120A  118A  256A  120A  118A  	fcall	stringdir
  1285  023C  00A1               	movwf	___lwdiv@divisor+1
  1286  023D  0838               	movf	sprintf@val+1,w
  1287  023E  00A3               	movwf	___lwdiv@dividend+1
  1288  023F  0837               	movf	sprintf@val,w
  1289  0240  00A2               	movwf	___lwdiv@dividend
  1290  0241  120A  118A  2464  120A  118A  	fcall	___lwdiv
  1291  0246  1283               	bcf	3,5	;RP0=0, select bank0
  1292  0247  1303               	bcf	3,6	;RP1=0, select bank0
  1293  0248  0821               	movf	?___lwdiv+1,w
  1294  0249  00AB               	movwf	___lwmod@dividend+1
  1295  024A  0820               	movf	?___lwdiv,w
  1296  024B  00AA               	movwf	___lwmod@dividend
  1297  024C  120A  118A  24F0  120A  118A  	fcall	___lwmod
  1298  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1299  0252  1303               	bcf	3,6	;RP1=0, select bank0
  1300  0253  0828               	movf	?___lwmod,w
  1301  0254  3E30               	addlw	48
  1302  0255  00B2               	movwf	??_sprintf+1
  1303  0256  0832               	movf	??_sprintf+1,w
  1304  0257  00BA               	movwf	sprintf@c
  1305  0258                     l1283:	
  1306                           
  1307                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1549:    };/opt/microchip/xc8
      +                          /v2.10/pic/sources/c90/common/doprnt.c: 1550:    ((*sp++ = (c)));
  1308  0258  083A               	movf	sprintf@c,w
  1309  0259  00B1               	movwf	??_sprintf
  1310  025A  0839               	movf	sprintf@sp,w
  1311  025B  0084               	movwf	4
  1312  025C  0831               	movf	??_sprintf,w
  1313  025D  1383               	bcf	3,7	;select IRP bank0
  1314  025E  0080               	movwf	0
  1315  025F                     l1285:	
  1316  025F  3001               	movlw	1
  1317  0260  00B1               	movwf	??_sprintf
  1318  0261  0831               	movf	??_sprintf,w
  1319  0262  07B9               	addwf	sprintf@sp,f
  1320  0263                     l1287:	
  1321                           
  1322                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1500:   while(prec--) {
  1323  0263  30FF               	movlw	255
  1324  0264  00B1               	movwf	??_sprintf
  1325  0265  0831               	movf	??_sprintf,w
  1326  0266  07B6               	addwf	sprintf@prec,f
  1327  0267  0A36               	incf	sprintf@prec,w
  1328  0268  1D03               	btfss	3,2
  1329  0269  2A6B               	goto	u1041
  1330  026A  2A6C               	goto	u1040
  1331  026B                     u1041:	
  1332  026B  2A28               	goto	l1281
  1333  026C                     u1040:	
  1334  026C                     l1289:	
  1335                           
  1336                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 553:  while((c = *f++)) {
  1337  026C  3001               	movlw	1
  1338  026D  07AE               	addwf	sprintf@f,f
  1339  026E  30FF               	movlw	-1
  1340  026F  072E               	addwf	sprintf@f,w
  1341  0270  0084               	movwf	4
  1342  0271  120A  118A  256A  120A  118A  	fcall	stringdir
  1343  0276  00B1               	movwf	??_sprintf
  1344  0277  0831               	movf	??_sprintf,w
  1345  0278  00BA               	movwf	sprintf@c
  1346  0279  083A               	movf	sprintf@c,w
  1347  027A  1D03               	btfss	3,2
  1348  027B  2A7D               	goto	u1051
  1349  027C  2A7E               	goto	u1050
  1350  027D                     u1051:	
  1351  027D  29A1               	goto	l1239
  1352  027E                     u1050:	
  1353  027E                     l1291:	
  1354                           
  1355                           ;/opt/microchip/xc8/v2.10/pic/sources/c90/common/doprnt.c: 1564:  *sp = 0;
  1356  027E  0839               	movf	sprintf@sp,w
  1357  027F  0084               	movwf	4
  1358  0280  1383               	bcf	3,7	;select IRP bank0
  1359  0281  0180               	clrf	0
  1360  0282                     l225:	
  1361  0282  0008               	return
  1362  0283                     __end_of_sprintf:	
  1363                           
  1364                           	psect	text2
  1365  04F0                     __ptext2:	
  1366 ;; *************** function ___lwmod *****************
  1367 ;; Defined at:
  1368 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/lwmod.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;  divisor         2    8[BANK0 ] unsigned int 
  1371 ;;  dividend        2   10[BANK0 ] unsigned int 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  counter         1   13[BANK0 ] unsigned char 
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  2    8[BANK0 ] unsigned int 
  1376 ;; Registers used:
  1377 ;;		wreg, status,2, status,0
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1383 ;;      Params:         0       4       0       0       0
  1384 ;;      Locals:         0       1       0       0       0
  1385 ;;      Temps:          0       1       0       0       0
  1386 ;;      Totals:         0       6       0       0       0
  1387 ;;Total ram usage:        6 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; Hardware stack levels required when called:    2
  1390 ;; This function calls:
  1391 ;;		Nothing
  1392 ;; This function is called by:
  1393 ;;		_sprintf
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           
  1398                           ;psect for function ___lwmod
  1399  04F0                     ___lwmod:	
  1400  04F0                     l1181:	
  1401                           ;incstack = 0
  1402                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1403                           
  1404  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  1405  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  1406  04F2  0828               	movf	___lwmod@divisor,w
  1407  04F3  0429               	iorwf	___lwmod@divisor+1,w
  1408  04F4  1903               	btfsc	3,2
  1409  04F5  2CF7               	goto	u821
  1410  04F6  2CF8               	goto	u820
  1411  04F7                     u821:	
  1412  04F7  2D27               	goto	l1199
  1413  04F8                     u820:	
  1414  04F8                     l1183:	
  1415  04F8  01AD               	clrf	___lwmod@counter
  1416  04F9  0AAD               	incf	___lwmod@counter,f
  1417  04FA  2D06               	goto	l1189
  1418  04FB                     l1185:	
  1419  04FB  3001               	movlw	1
  1420  04FC                     u835:	
  1421  04FC  1003               	clrc
  1422  04FD  0DA8               	rlf	___lwmod@divisor,f
  1423  04FE  0DA9               	rlf	___lwmod@divisor+1,f
  1424  04FF  3EFF               	addlw	-1
  1425  0500  1D03               	skipz
  1426  0501  2CFC               	goto	u835
  1427  0502                     l1187:	
  1428  0502  3001               	movlw	1
  1429  0503  00AC               	movwf	??___lwmod
  1430  0504  082C               	movf	??___lwmod,w
  1431  0505  07AD               	addwf	___lwmod@counter,f
  1432  0506                     l1189:	
  1433  0506  1FA9               	btfss	___lwmod@divisor+1,7
  1434  0507  2D09               	goto	u841
  1435  0508  2D0A               	goto	u840
  1436  0509                     u841:	
  1437  0509  2CFB               	goto	l1185
  1438  050A                     u840:	
  1439  050A                     l1191:	
  1440  050A  0829               	movf	___lwmod@divisor+1,w
  1441  050B  022B               	subwf	___lwmod@dividend+1,w
  1442  050C  1D03               	skipz
  1443  050D  2D10               	goto	u855
  1444  050E  0828               	movf	___lwmod@divisor,w
  1445  050F  022A               	subwf	___lwmod@dividend,w
  1446  0510                     u855:	
  1447  0510  1C03               	skipc
  1448  0511  2D13               	goto	u851
  1449  0512  2D14               	goto	u850
  1450  0513                     u851:	
  1451  0513  2D1A               	goto	l1195
  1452  0514                     u850:	
  1453  0514                     l1193:	
  1454  0514  0828               	movf	___lwmod@divisor,w
  1455  0515  02AA               	subwf	___lwmod@dividend,f
  1456  0516  0829               	movf	___lwmod@divisor+1,w
  1457  0517  1C03               	skipc
  1458  0518  03AB               	decf	___lwmod@dividend+1,f
  1459  0519  02AB               	subwf	___lwmod@dividend+1,f
  1460  051A                     l1195:	
  1461  051A  3001               	movlw	1
  1462  051B                     u865:	
  1463  051B  1003               	clrc
  1464  051C  0CA9               	rrf	___lwmod@divisor+1,f
  1465  051D  0CA8               	rrf	___lwmod@divisor,f
  1466  051E  3EFF               	addlw	-1
  1467  051F  1D03               	skipz
  1468  0520  2D1B               	goto	u865
  1469  0521                     l1197:	
  1470  0521  3001               	movlw	1
  1471  0522  02AD               	subwf	___lwmod@counter,f
  1472  0523  1D03               	btfss	3,2
  1473  0524  2D26               	goto	u871
  1474  0525  2D27               	goto	u870
  1475  0526                     u871:	
  1476  0526  2D0A               	goto	l1191
  1477  0527                     u870:	
  1478  0527                     l1199:	
  1479  0527  082B               	movf	___lwmod@dividend+1,w
  1480  0528  00A9               	movwf	?___lwmod+1
  1481  0529  082A               	movf	___lwmod@dividend,w
  1482  052A  00A8               	movwf	?___lwmod
  1483  052B                     l511:	
  1484  052B  0008               	return
  1485  052C                     __end_of___lwmod:	
  1486                           
  1487                           	psect	text3
  1488  0464                     __ptext3:	
  1489 ;; *************** function ___lwdiv *****************
  1490 ;; Defined at:
  1491 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/lwdiv.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;  divisor         2    0[BANK0 ] unsigned int 
  1494 ;;  dividend        2    2[BANK0 ] unsigned int 
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  quotient        2    5[BANK0 ] unsigned int 
  1497 ;;  counter         1    7[BANK0 ] unsigned char 
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  2    0[BANK0 ] unsigned int 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1507 ;;      Params:         0       4       0       0       0
  1508 ;;      Locals:         0       3       0       0       0
  1509 ;;      Temps:          0       1       0       0       0
  1510 ;;      Totals:         0       8       0       0       0
  1511 ;;Total ram usage:        8 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    2
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_sprintf
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           
  1522                           ;psect for function ___lwdiv
  1523  0464                     ___lwdiv:	
  1524  0464                     l1155:	
  1525                           ;incstack = 0
  1526                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1527                           
  1528  0464  1283               	bcf	3,5	;RP0=0, select bank0
  1529  0465  1303               	bcf	3,6	;RP1=0, select bank0
  1530  0466  01A5               	clrf	___lwdiv@quotient
  1531  0467  01A6               	clrf	___lwdiv@quotient+1
  1532  0468                     l1157:	
  1533  0468  0820               	movf	___lwdiv@divisor,w
  1534  0469  0421               	iorwf	___lwdiv@divisor+1,w
  1535  046A  1903               	btfsc	3,2
  1536  046B  2C6D               	goto	u751
  1537  046C  2C6E               	goto	u750
  1538  046D                     u751:	
  1539  046D  2CA5               	goto	l1177
  1540  046E                     u750:	
  1541  046E                     l1159:	
  1542  046E  01A7               	clrf	___lwdiv@counter
  1543  046F  0AA7               	incf	___lwdiv@counter,f
  1544  0470  2C7C               	goto	l1165
  1545  0471                     l1161:	
  1546  0471  3001               	movlw	1
  1547  0472                     u765:	
  1548  0472  1003               	clrc
  1549  0473  0DA0               	rlf	___lwdiv@divisor,f
  1550  0474  0DA1               	rlf	___lwdiv@divisor+1,f
  1551  0475  3EFF               	addlw	-1
  1552  0476  1D03               	skipz
  1553  0477  2C72               	goto	u765
  1554  0478                     l1163:	
  1555  0478  3001               	movlw	1
  1556  0479  00A4               	movwf	??___lwdiv
  1557  047A  0824               	movf	??___lwdiv,w
  1558  047B  07A7               	addwf	___lwdiv@counter,f
  1559  047C                     l1165:	
  1560  047C  1FA1               	btfss	___lwdiv@divisor+1,7
  1561  047D  2C7F               	goto	u771
  1562  047E  2C80               	goto	u770
  1563  047F                     u771:	
  1564  047F  2C71               	goto	l1161
  1565  0480                     u770:	
  1566  0480                     l1167:	
  1567  0480  3001               	movlw	1
  1568  0481                     u785:	
  1569  0481  1003               	clrc
  1570  0482  0DA5               	rlf	___lwdiv@quotient,f
  1571  0483  0DA6               	rlf	___lwdiv@quotient+1,f
  1572  0484  3EFF               	addlw	-1
  1573  0485  1D03               	skipz
  1574  0486  2C81               	goto	u785
  1575  0487  0821               	movf	___lwdiv@divisor+1,w
  1576  0488  0223               	subwf	___lwdiv@dividend+1,w
  1577  0489  1D03               	skipz
  1578  048A  2C8D               	goto	u795
  1579  048B  0820               	movf	___lwdiv@divisor,w
  1580  048C  0222               	subwf	___lwdiv@dividend,w
  1581  048D                     u795:	
  1582  048D  1C03               	skipc
  1583  048E  2C90               	goto	u791
  1584  048F  2C91               	goto	u790
  1585  0490                     u791:	
  1586  0490  2C98               	goto	l1173
  1587  0491                     u790:	
  1588  0491                     l1169:	
  1589  0491  0820               	movf	___lwdiv@divisor,w
  1590  0492  02A2               	subwf	___lwdiv@dividend,f
  1591  0493  0821               	movf	___lwdiv@divisor+1,w
  1592  0494  1C03               	skipc
  1593  0495  03A3               	decf	___lwdiv@dividend+1,f
  1594  0496  02A3               	subwf	___lwdiv@dividend+1,f
  1595  0497                     l1171:	
  1596  0497  1425               	bsf	___lwdiv@quotient,0
  1597  0498                     l1173:	
  1598  0498  3001               	movlw	1
  1599  0499                     u805:	
  1600  0499  1003               	clrc
  1601  049A  0CA1               	rrf	___lwdiv@divisor+1,f
  1602  049B  0CA0               	rrf	___lwdiv@divisor,f
  1603  049C  3EFF               	addlw	-1
  1604  049D  1D03               	skipz
  1605  049E  2C99               	goto	u805
  1606  049F                     l1175:	
  1607  049F  3001               	movlw	1
  1608  04A0  02A7               	subwf	___lwdiv@counter,f
  1609  04A1  1D03               	btfss	3,2
  1610  04A2  2CA4               	goto	u811
  1611  04A3  2CA5               	goto	u810
  1612  04A4                     u811:	
  1613  04A4  2C80               	goto	l1167
  1614  04A5                     u810:	
  1615  04A5                     l1177:	
  1616  04A5  0826               	movf	___lwdiv@quotient+1,w
  1617  04A6  00A1               	movwf	?___lwdiv+1
  1618  04A7  0825               	movf	___lwdiv@quotient,w
  1619  04A8  00A0               	movwf	?___lwdiv
  1620  04A9                     l501:	
  1621  04A9  0008               	return
  1622  04AA                     __end_of___lwdiv:	
  1623                           
  1624                           	psect	text4
  1625  04AA                     __ptext4:	
  1626 ;; *************** function _UART_Write_Text *****************
  1627 ;; Defined at:
  1628 ;;		line 53 in file "./uart.h"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;  text            2    1[BANK0 ] PTR unsigned char 
  1631 ;;		 -> buffer(8), STR_1(19), 
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;  i               2    6[BANK0 ] int 
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  1    wreg      void 
  1636 ;; Registers used:
  1637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1643 ;;      Params:         0       2       0       0       0
  1644 ;;      Locals:         0       2       0       0       0
  1645 ;;      Temps:          0       3       0       0       0
  1646 ;;      Totals:         0       7       0       0       0
  1647 ;;Total ram usage:        7 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; Hardware stack levels required when called:    3
  1650 ;; This function calls:
  1651 ;;		_UART_Write
  1652 ;; This function is called by:
  1653 ;;		_main
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           
  1658                           ;psect for function _UART_Write_Text
  1659  04AA                     _UART_Write_Text:	
  1660  04AA                     l1229:	
  1661                           ;incstack = 0
  1662                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1663                           
  1664                           
  1665                           ;./uart.h: 53: void UART_Write_Text(char *text);./uart.h: 54: {;./uart.h: 55:   int i;;.
      +                          /uart.h: 56:   for(i=0;text[i]!='\0';i++)
  1666  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  1667  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  1668  04AC  01A6               	clrf	UART_Write_Text@i
  1669  04AD  01A7               	clrf	UART_Write_Text@i+1
  1670  04AE  2CD3               	goto	l1235
  1671  04AF                     l1231:	
  1672                           
  1673                           ;./uart.h: 57:    UART_Write(text[i]);
  1674  04AF  0826               	movf	UART_Write_Text@i,w
  1675  04B0  0721               	addwf	UART_Write_Text@text,w
  1676  04B1  00A4               	movwf	??_UART_Write_Text+1
  1677  04B2  0822               	movf	UART_Write_Text@text+1,w
  1678  04B3  00A3               	movwf	??_UART_Write_Text
  1679  04B4  1803               	skipnc
  1680  04B5  0AA3               	incf	??_UART_Write_Text,f
  1681  04B6  1FA6               	btfss	UART_Write_Text@i,7
  1682  04B7  2CB9               	goto	u960
  1683  04B8  03A3               	decf	??_UART_Write_Text,f
  1684  04B9                     u960:	
  1685  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  1686  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  1687  04BB  0823               	movf	??_UART_Write_Text,w
  1688  04BC  00A5               	movwf	??_UART_Write_Text+2
  1689  04BD  0825               	movf	??_UART_Write_Text+2,w
  1690  04BE  00FF               	movwf	btemp+1
  1691  04BF  0824               	movf	??_UART_Write_Text+1,w
  1692  04C0  0084               	movwf	4
  1693  04C1  120A  118A  2560  120A  118A  	fcall	stringtab
  1694  04C6  120A  118A  2590  120A  118A  	fcall	_UART_Write
  1695  04CB                     l1233:	
  1696  04CB  3001               	movlw	1
  1697  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  1698  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  1699  04CE  07A6               	addwf	UART_Write_Text@i,f
  1700  04CF  1803               	skipnc
  1701  04D0  0AA7               	incf	UART_Write_Text@i+1,f
  1702  04D1  3000               	movlw	0
  1703  04D2  07A7               	addwf	UART_Write_Text@i+1,f
  1704  04D3                     l1235:	
  1705  04D3  0826               	movf	UART_Write_Text@i,w
  1706  04D4  0721               	addwf	UART_Write_Text@text,w
  1707  04D5  00A4               	movwf	??_UART_Write_Text+1
  1708  04D6  0822               	movf	UART_Write_Text@text+1,w
  1709  04D7  00A3               	movwf	??_UART_Write_Text
  1710  04D8  1803               	skipnc
  1711  04D9  0AA3               	incf	??_UART_Write_Text,f
  1712  04DA  1FA6               	btfss	UART_Write_Text@i,7
  1713  04DB  2CDD               	goto	u970
  1714  04DC  03A3               	decf	??_UART_Write_Text,f
  1715  04DD                     u970:	
  1716  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  1717  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  1718  04DF  0823               	movf	??_UART_Write_Text,w
  1719  04E0  00A5               	movwf	??_UART_Write_Text+2
  1720  04E1  0825               	movf	??_UART_Write_Text+2,w
  1721  04E2  00FF               	movwf	btemp+1
  1722  04E3  0824               	movf	??_UART_Write_Text+1,w
  1723  04E4  0084               	movwf	4
  1724  04E5  120A  118A  2560  120A  118A  	fcall	stringtab
  1725  04EA  3A00               	xorlw	0
  1726  04EB  1D03               	skipz
  1727  04EC  2CEE               	goto	u981
  1728  04ED  2CEF               	goto	u980
  1729  04EE                     u981:	
  1730  04EE  2CAF               	goto	l1231
  1731  04EF                     u980:	
  1732  04EF                     l89:	
  1733  04EF  0008               	return
  1734  04F0                     __end_of_UART_Write_Text:	
  1735                           
  1736                           	psect	text5
  1737  0590                     __ptext5:	
  1738 ;; *************** function _UART_Write *****************
  1739 ;; Defined at:
  1740 ;;		line 47 in file "./uart.h"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  data            1    wreg     unsigned char 
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;  data            1    0[BANK0 ] unsigned char 
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  1    wreg      void 
  1747 ;; Registers used:
  1748 ;;		wreg
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1754 ;;      Params:         0       0       0       0       0
  1755 ;;      Locals:         0       1       0       0       0
  1756 ;;      Temps:          0       0       0       0       0
  1757 ;;      Totals:         0       1       0       0       0
  1758 ;;Total ram usage:        1 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    2
  1761 ;; This function calls:
  1762 ;;		Nothing
  1763 ;; This function is called by:
  1764 ;;		_UART_Write_Text
  1765 ;;		_main
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           
  1770                           ;psect for function _UART_Write
  1771  0590                     _UART_Write:	
  1772                           
  1773                           ;incstack = 0
  1774                           ; Regs used in _UART_Write: [wreg]
  1775                           ;UART_Write@data stored from wreg
  1776  0590  1283               	bcf	3,5	;RP0=0, select bank0
  1777  0591  1303               	bcf	3,6	;RP1=0, select bank0
  1778  0592  00A0               	movwf	UART_Write@data
  1779  0593                     l1111:	
  1780  0593                     l80:	
  1781                           ;./uart.h: 47: void UART_Write(char data);./uart.h: 48: {;./uart.h: 49:   while(!TRMT);
  1782                           
  1783  0593  1683               	bsf	3,5	;RP0=1, select bank1
  1784  0594  1303               	bcf	3,6	;RP1=0, select bank1
  1785  0595  1C98               	btfss	24,1	;volatile
  1786  0596  2D98               	goto	u641
  1787  0597  2D99               	goto	u640
  1788  0598                     u641:	
  1789  0598  2D93               	goto	l80
  1790  0599                     u640:	
  1791  0599                     l1113:	
  1792                           
  1793                           ;./uart.h: 50:   TXREG = data;
  1794  0599  1283               	bcf	3,5	;RP0=0, select bank0
  1795  059A  1303               	bcf	3,6	;RP1=0, select bank0
  1796  059B  0820               	movf	UART_Write@data,w
  1797  059C  0099               	movwf	25	;volatile
  1798  059D                     l83:	
  1799  059D  0008               	return
  1800  059E                     __end_of_UART_Write:	
  1801                           
  1802                           	psect	text6
  1803  0283                     __ptext6:	
  1804 ;; *************** function _UART_Init *****************
  1805 ;; Defined at:
  1806 ;;		line 1 in file "./uart.h"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;  baudrate        4   15[BANK0 ] const long 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  x               2   31[BANK0 ] unsigned int 
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      unsigned char 
  1813 ;; Registers used:
  1814 ;;		wreg, status,2, status,0, pclath, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1820 ;;      Params:         0       4       0       0       0
  1821 ;;      Locals:         0       2       0       0       0
  1822 ;;      Temps:          0      12       0       0       0
  1823 ;;      Totals:         0      18       0       0       0
  1824 ;;Total ram usage:       18 bytes
  1825 ;; Hardware stack levels used:    1
  1826 ;; Hardware stack levels required when called:    3
  1827 ;; This function calls:
  1828 ;;		___aldiv
  1829 ;; This function is called by:
  1830 ;;		_main
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           
  1835                           ;psect for function _UART_Init
  1836  0283                     _UART_Init:	
  1837  0283                     l1203:	
  1838                           ;incstack = 0
  1839                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  1840                           
  1841                           
  1842                           ;./uart.h: 1: char UART_Init(const long int baudrate);./uart.h: 2: {;./uart.h: 3:  unsig
      +                          ned int x;;./uart.h: 4:  x = (8000000 - baudrate*64)/(baudrate*64);
  1843  0283  1283               	bcf	3,5	;RP0=0, select bank0
  1844  0284  1303               	bcf	3,6	;RP1=0, select bank0
  1845  0285  082F               	movf	UART_Init@baudrate,w
  1846  0286  00B3               	movwf	??_UART_Init
  1847  0287  0830               	movf	UART_Init@baudrate+1,w
  1848  0288  00B4               	movwf	??_UART_Init+1
  1849  0289  0831               	movf	UART_Init@baudrate+2,w
  1850  028A  00B5               	movwf	??_UART_Init+2
  1851  028B  0832               	movf	UART_Init@baudrate+3,w
  1852  028C  00B6               	movwf	??_UART_Init+3
  1853  028D  3006               	movlw	6
  1854  028E                     u885:	
  1855  028E  1003               	clrc
  1856  028F  0DB3               	rlf	??_UART_Init,f
  1857  0290  0DB4               	rlf	??_UART_Init+1,f
  1858  0291  0DB5               	rlf	??_UART_Init+2,f
  1859  0292  0DB6               	rlf	??_UART_Init+3,f
  1860  0293                     u880:	
  1861  0293  3EFF               	addlw	-1
  1862  0294  1D03               	skipz
  1863  0295  2A8E               	goto	u885
  1864  0296  0836               	movf	??_UART_Init+3,w
  1865  0297  00A3               	movwf	___aldiv@divisor+3
  1866  0298  0835               	movf	??_UART_Init+2,w
  1867  0299  00A2               	movwf	___aldiv@divisor+2
  1868  029A  0834               	movf	??_UART_Init+1,w
  1869  029B  00A1               	movwf	___aldiv@divisor+1
  1870  029C  0833               	movf	??_UART_Init,w
  1871  029D  00A0               	movwf	___aldiv@divisor
  1872  029E  082F               	movf	UART_Init@baudrate,w
  1873  029F  00B7               	movwf	??_UART_Init+4
  1874  02A0  0830               	movf	UART_Init@baudrate+1,w
  1875  02A1  00B8               	movwf	??_UART_Init+5
  1876  02A2  0831               	movf	UART_Init@baudrate+2,w
  1877  02A3  00B9               	movwf	??_UART_Init+6
  1878  02A4  0832               	movf	UART_Init@baudrate+3,w
  1879  02A5  00BA               	movwf	??_UART_Init+7
  1880  02A6  3006               	movlw	6
  1881  02A7                     u895:	
  1882  02A7  1003               	clrc
  1883  02A8  0DB7               	rlf	??_UART_Init+4,f
  1884  02A9  0DB8               	rlf	??_UART_Init+5,f
  1885  02AA  0DB9               	rlf	??_UART_Init+6,f
  1886  02AB  0DBA               	rlf	??_UART_Init+7,f
  1887  02AC                     u890:	
  1888  02AC  3EFF               	addlw	-1
  1889  02AD  1D03               	skipz
  1890  02AE  2AA7               	goto	u895
  1891  02AF  3000               	movlw	0
  1892  02B0  00BB               	movwf	??_UART_Init+8
  1893  02B1  3012               	movlw	18
  1894  02B2  00BC               	movwf	??_UART_Init+9
  1895  02B3  307A               	movlw	122
  1896  02B4  00BD               	movwf	??_UART_Init+10
  1897  02B5  3000               	movlw	0
  1898  02B6  00BE               	movwf	??_UART_Init+11
  1899  02B7  0837               	movf	??_UART_Init+4,w
  1900  02B8  02BB               	subwf	??_UART_Init+8,f
  1901  02B9  0838               	movf	??_UART_Init+5,w
  1902  02BA  1C03               	skipc
  1903  02BB  0F38               	incfsz	??_UART_Init+5,w
  1904  02BC  2ABE               	goto	u901
  1905  02BD  2ABF               	goto	u902
  1906  02BE                     u901:	
  1907  02BE  02BC               	subwf	??_UART_Init+9,f
  1908  02BF                     u902:	
  1909  02BF  0839               	movf	??_UART_Init+6,w
  1910  02C0  1C03               	skipc
  1911  02C1  0F39               	incfsz	??_UART_Init+6,w
  1912  02C2  2AC4               	goto	u903
  1913  02C3  2AC5               	goto	u904
  1914  02C4                     u903:	
  1915  02C4  02BD               	subwf	??_UART_Init+10,f
  1916  02C5                     u904:	
  1917  02C5  083A               	movf	??_UART_Init+7,w
  1918  02C6  1C03               	skipc
  1919  02C7  0F3A               	incfsz	??_UART_Init+7,w
  1920  02C8  2ACA               	goto	u905
  1921  02C9  2ACB               	goto	u906
  1922  02CA                     u905:	
  1923  02CA  02BE               	subwf	??_UART_Init+11,f
  1924  02CB                     u906:	
  1925  02CB  083E               	movf	??_UART_Init+11,w
  1926  02CC  00A7               	movwf	___aldiv@dividend+3
  1927  02CD  083D               	movf	??_UART_Init+10,w
  1928  02CE  00A6               	movwf	___aldiv@dividend+2
  1929  02CF  083C               	movf	??_UART_Init+9,w
  1930  02D0  00A5               	movwf	___aldiv@dividend+1
  1931  02D1  083B               	movf	??_UART_Init+8,w
  1932  02D2  00A4               	movwf	___aldiv@dividend
  1933  02D3  120A  118A  2360  120A  118A  	fcall	___aldiv
  1934  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  1935  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  1936  02DA  0821               	movf	?___aldiv+1,w
  1937  02DB  00C0               	movwf	UART_Init@x+1
  1938  02DC  0820               	movf	?___aldiv,w
  1939  02DD  00BF               	movwf	UART_Init@x
  1940  02DE                     l1205:	
  1941                           
  1942                           ;./uart.h: 5:  if(x>255)
  1943  02DE  3001               	movlw	1
  1944  02DF  0240               	subwf	UART_Init@x+1,w
  1945  02E0  3000               	movlw	0
  1946  02E1  1903               	skipnz
  1947  02E2  023F               	subwf	UART_Init@x,w
  1948  02E3  1C03               	skipc
  1949  02E4  2AE6               	goto	u911
  1950  02E5  2AE7               	goto	u910
  1951  02E6                     u911:	
  1952  02E6  2B43               	goto	l1211
  1953  02E7                     u910:	
  1954  02E7                     l1207:	
  1955                           
  1956                           ;./uart.h: 6:  {;./uart.h: 7:   x = (8000000 - baudrate*16)/(baudrate*16);
  1957  02E7  082F               	movf	UART_Init@baudrate,w
  1958  02E8  00B3               	movwf	??_UART_Init
  1959  02E9  0830               	movf	UART_Init@baudrate+1,w
  1960  02EA  00B4               	movwf	??_UART_Init+1
  1961  02EB  0831               	movf	UART_Init@baudrate+2,w
  1962  02EC  00B5               	movwf	??_UART_Init+2
  1963  02ED  0832               	movf	UART_Init@baudrate+3,w
  1964  02EE  00B6               	movwf	??_UART_Init+3
  1965  02EF  3004               	movlw	4
  1966  02F0                     u925:	
  1967  02F0  1003               	clrc
  1968  02F1  0DB3               	rlf	??_UART_Init,f
  1969  02F2  0DB4               	rlf	??_UART_Init+1,f
  1970  02F3  0DB5               	rlf	??_UART_Init+2,f
  1971  02F4  0DB6               	rlf	??_UART_Init+3,f
  1972  02F5                     u920:	
  1973  02F5  3EFF               	addlw	-1
  1974  02F6  1D03               	skipz
  1975  02F7  2AF0               	goto	u925
  1976  02F8  0836               	movf	??_UART_Init+3,w
  1977  02F9  00A3               	movwf	___aldiv@divisor+3
  1978  02FA  0835               	movf	??_UART_Init+2,w
  1979  02FB  00A2               	movwf	___aldiv@divisor+2
  1980  02FC  0834               	movf	??_UART_Init+1,w
  1981  02FD  00A1               	movwf	___aldiv@divisor+1
  1982  02FE  0833               	movf	??_UART_Init,w
  1983  02FF  00A0               	movwf	___aldiv@divisor
  1984  0300  082F               	movf	UART_Init@baudrate,w
  1985  0301  00B7               	movwf	??_UART_Init+4
  1986  0302  0830               	movf	UART_Init@baudrate+1,w
  1987  0303  00B8               	movwf	??_UART_Init+5
  1988  0304  0831               	movf	UART_Init@baudrate+2,w
  1989  0305  00B9               	movwf	??_UART_Init+6
  1990  0306  0832               	movf	UART_Init@baudrate+3,w
  1991  0307  00BA               	movwf	??_UART_Init+7
  1992  0308  3004               	movlw	4
  1993  0309                     u935:	
  1994  0309  1003               	clrc
  1995  030A  0DB7               	rlf	??_UART_Init+4,f
  1996  030B  0DB8               	rlf	??_UART_Init+5,f
  1997  030C  0DB9               	rlf	??_UART_Init+6,f
  1998  030D  0DBA               	rlf	??_UART_Init+7,f
  1999  030E                     u930:	
  2000  030E  3EFF               	addlw	-1
  2001  030F  1D03               	skipz
  2002  0310  2B09               	goto	u935
  2003  0311  3000               	movlw	0
  2004  0312  00BB               	movwf	??_UART_Init+8
  2005  0313  3012               	movlw	18
  2006  0314  00BC               	movwf	??_UART_Init+9
  2007  0315  307A               	movlw	122
  2008  0316  00BD               	movwf	??_UART_Init+10
  2009  0317  3000               	movlw	0
  2010  0318  00BE               	movwf	??_UART_Init+11
  2011  0319  0837               	movf	??_UART_Init+4,w
  2012  031A  02BB               	subwf	??_UART_Init+8,f
  2013  031B  0838               	movf	??_UART_Init+5,w
  2014  031C  1C03               	skipc
  2015  031D  0F38               	incfsz	??_UART_Init+5,w
  2016  031E  2B20               	goto	u941
  2017  031F  2B21               	goto	u942
  2018  0320                     u941:	
  2019  0320  02BC               	subwf	??_UART_Init+9,f
  2020  0321                     u942:	
  2021  0321  0839               	movf	??_UART_Init+6,w
  2022  0322  1C03               	skipc
  2023  0323  0F39               	incfsz	??_UART_Init+6,w
  2024  0324  2B26               	goto	u943
  2025  0325  2B27               	goto	u944
  2026  0326                     u943:	
  2027  0326  02BD               	subwf	??_UART_Init+10,f
  2028  0327                     u944:	
  2029  0327  083A               	movf	??_UART_Init+7,w
  2030  0328  1C03               	skipc
  2031  0329  0F3A               	incfsz	??_UART_Init+7,w
  2032  032A  2B2C               	goto	u945
  2033  032B  2B2D               	goto	u946
  2034  032C                     u945:	
  2035  032C  02BE               	subwf	??_UART_Init+11,f
  2036  032D                     u946:	
  2037  032D  083E               	movf	??_UART_Init+11,w
  2038  032E  00A7               	movwf	___aldiv@dividend+3
  2039  032F  083D               	movf	??_UART_Init+10,w
  2040  0330  00A6               	movwf	___aldiv@dividend+2
  2041  0331  083C               	movf	??_UART_Init+9,w
  2042  0332  00A5               	movwf	___aldiv@dividend+1
  2043  0333  083B               	movf	??_UART_Init+8,w
  2044  0334  00A4               	movwf	___aldiv@dividend
  2045  0335  120A  118A  2360  120A  118A  	fcall	___aldiv
  2046  033A  1283               	bcf	3,5	;RP0=0, select bank0
  2047  033B  1303               	bcf	3,6	;RP1=0, select bank0
  2048  033C  0821               	movf	?___aldiv+1,w
  2049  033D  00C0               	movwf	UART_Init@x+1
  2050  033E  0820               	movf	?___aldiv,w
  2051  033F  00BF               	movwf	UART_Init@x
  2052  0340                     l1209:	
  2053                           
  2054                           ;./uart.h: 8:   BRGH = 1;
  2055  0340  1683               	bsf	3,5	;RP0=1, select bank1
  2056  0341  1303               	bcf	3,6	;RP1=0, select bank1
  2057  0342  1518               	bsf	24,2	;volatile
  2058  0343                     l1211:	
  2059                           
  2060                           ;./uart.h: 10:  if(x<256)
  2061  0343  3001               	movlw	1
  2062  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2063  0345  0240               	subwf	UART_Init@x+1,w
  2064  0346  3000               	movlw	0
  2065  0347  1903               	skipnz
  2066  0348  023F               	subwf	UART_Init@x,w
  2067  0349  1803               	skipnc
  2068  034A  2B4C               	goto	u951
  2069  034B  2B4D               	goto	u950
  2070  034C                     u951:	
  2071  034C  2B5F               	goto	l59
  2072  034D                     u950:	
  2073  034D                     l1213:	
  2074                           
  2075                           ;./uart.h: 11:  {;./uart.h: 12:    SPBRG = x;
  2076  034D  083F               	movf	UART_Init@x,w
  2077  034E  1683               	bsf	3,5	;RP0=1, select bank1
  2078  034F  1303               	bcf	3,6	;RP1=0, select bank1
  2079  0350  0099               	movwf	25	;volatile
  2080  0351                     l1215:	
  2081                           
  2082                           ;./uart.h: 13:    SYNC = 0;
  2083  0351  1218               	bcf	24,4	;volatile
  2084  0352                     l1217:	
  2085                           
  2086                           ;./uart.h: 14:    SPEN = 1;
  2087  0352  1283               	bcf	3,5	;RP0=0, select bank0
  2088  0353  1303               	bcf	3,6	;RP1=0, select bank0
  2089  0354  1798               	bsf	24,7	;volatile
  2090  0355                     l1219:	
  2091                           
  2092                           ;./uart.h: 15:           TRISC7 = 1;
  2093  0355  1683               	bsf	3,5	;RP0=1, select bank1
  2094  0356  1303               	bcf	3,6	;RP1=0, select bank1
  2095  0357  1787               	bsf	7,7	;volatile
  2096  0358                     l1221:	
  2097                           
  2098                           ;./uart.h: 16:           TRISC6 = 1;
  2099  0358  1707               	bsf	7,6	;volatile
  2100  0359                     l1223:	
  2101                           
  2102                           ;./uart.h: 17:           CREN = 1;
  2103  0359  1283               	bcf	3,5	;RP0=0, select bank0
  2104  035A  1303               	bcf	3,6	;RP1=0, select bank0
  2105  035B  1618               	bsf	24,4	;volatile
  2106  035C                     l1225:	
  2107                           
  2108                           ;./uart.h: 18:           TXEN = 1;
  2109  035C  1683               	bsf	3,5	;RP0=1, select bank1
  2110  035D  1303               	bcf	3,6	;RP1=0, select bank1
  2111  035E  1698               	bsf	24,5	;volatile
  2112  035F                     l59:	
  2113  035F  0008               	return
  2114  0360                     __end_of_UART_Init:	
  2115                           
  2116                           	psect	text7
  2117  0360                     __ptext7:	
  2118 ;; *************** function ___aldiv *****************
  2119 ;; Defined at:
  2120 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/aldiv.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;  divisor         4    0[BANK0 ] long 
  2123 ;;  dividend        4    4[BANK0 ] long 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  quotient        4   11[BANK0 ] long 
  2126 ;;  sign            1   10[BANK0 ] unsigned char 
  2127 ;;  counter         1    9[BANK0 ] unsigned char 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  4    0[BANK0 ] long 
  2130 ;; Registers used:
  2131 ;;		wreg, status,2, status,0
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2137 ;;      Params:         0       8       0       0       0
  2138 ;;      Locals:         0       6       0       0       0
  2139 ;;      Temps:          0       1       0       0       0
  2140 ;;      Totals:         0      15       0       0       0
  2141 ;;Total ram usage:       15 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    2
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_UART_Init
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           
  2152                           ;psect for function ___aldiv
  2153  0360                     ___aldiv:	
  2154  0360                     l1115:	
  2155                           ;incstack = 0
  2156                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2157                           
  2158  0360  1283               	bcf	3,5	;RP0=0, select bank0
  2159  0361  1303               	bcf	3,6	;RP1=0, select bank0
  2160  0362  01AA               	clrf	___aldiv@sign
  2161  0363                     l1117:	
  2162  0363  1FA3               	btfss	___aldiv@divisor+3,7
  2163  0364  2B66               	goto	u651
  2164  0365  2B67               	goto	u650
  2165  0366                     u651:	
  2166  0366  2B74               	goto	l294
  2167  0367                     u650:	
  2168  0367                     l1119:	
  2169  0367  09A0               	comf	___aldiv@divisor,f
  2170  0368  09A1               	comf	___aldiv@divisor+1,f
  2171  0369  09A2               	comf	___aldiv@divisor+2,f
  2172  036A  09A3               	comf	___aldiv@divisor+3,f
  2173  036B  0AA0               	incf	___aldiv@divisor,f
  2174  036C  1903               	skipnz
  2175  036D  0AA1               	incf	___aldiv@divisor+1,f
  2176  036E  1903               	skipnz
  2177  036F  0AA2               	incf	___aldiv@divisor+2,f
  2178  0370  1903               	skipnz
  2179  0371  0AA3               	incf	___aldiv@divisor+3,f
  2180  0372  01AA               	clrf	___aldiv@sign
  2181  0373  0AAA               	incf	___aldiv@sign,f
  2182  0374                     l294:	
  2183  0374  1FA7               	btfss	___aldiv@dividend+3,7
  2184  0375  2B77               	goto	u661
  2185  0376  2B78               	goto	u660
  2186  0377                     u661:	
  2187  0377  2B87               	goto	l1125
  2188  0378                     u660:	
  2189  0378                     l1121:	
  2190  0378  09A4               	comf	___aldiv@dividend,f
  2191  0379  09A5               	comf	___aldiv@dividend+1,f
  2192  037A  09A6               	comf	___aldiv@dividend+2,f
  2193  037B  09A7               	comf	___aldiv@dividend+3,f
  2194  037C  0AA4               	incf	___aldiv@dividend,f
  2195  037D  1903               	skipnz
  2196  037E  0AA5               	incf	___aldiv@dividend+1,f
  2197  037F  1903               	skipnz
  2198  0380  0AA6               	incf	___aldiv@dividend+2,f
  2199  0381  1903               	skipnz
  2200  0382  0AA7               	incf	___aldiv@dividend+3,f
  2201  0383                     l1123:	
  2202  0383  3001               	movlw	1
  2203  0384  00A8               	movwf	??___aldiv
  2204  0385  0828               	movf	??___aldiv,w
  2205  0386  06AA               	xorwf	___aldiv@sign,f
  2206  0387                     l1125:	
  2207  0387  3000               	movlw	0
  2208  0388  00AE               	movwf	___aldiv@quotient+3
  2209  0389  3000               	movlw	0
  2210  038A  00AD               	movwf	___aldiv@quotient+2
  2211  038B  3000               	movlw	0
  2212  038C  00AC               	movwf	___aldiv@quotient+1
  2213  038D  3000               	movlw	0
  2214  038E  00AB               	movwf	___aldiv@quotient
  2215  038F                     l1127:	
  2216  038F  0823               	movf	___aldiv@divisor+3,w
  2217  0390  0422               	iorwf	___aldiv@divisor+2,w
  2218  0391  0421               	iorwf	___aldiv@divisor+1,w
  2219  0392  0420               	iorwf	___aldiv@divisor,w
  2220  0393  1903               	skipnz
  2221  0394  2B96               	goto	u671
  2222  0395  2B97               	goto	u670
  2223  0396                     u671:	
  2224  0396  2BE4               	goto	l1147
  2225  0397                     u670:	
  2226  0397                     l1129:	
  2227  0397  01A9               	clrf	___aldiv@counter
  2228  0398  0AA9               	incf	___aldiv@counter,f
  2229  0399  2BA7               	goto	l1133
  2230  039A                     l1131:	
  2231  039A  3001               	movlw	1
  2232  039B  00A8               	movwf	??___aldiv
  2233  039C                     u685:	
  2234  039C  1003               	clrc
  2235  039D  0DA0               	rlf	___aldiv@divisor,f
  2236  039E  0DA1               	rlf	___aldiv@divisor+1,f
  2237  039F  0DA2               	rlf	___aldiv@divisor+2,f
  2238  03A0  0DA3               	rlf	___aldiv@divisor+3,f
  2239  03A1  0BA8               	decfsz	??___aldiv,f
  2240  03A2  2B9C               	goto	u685
  2241  03A3  3001               	movlw	1
  2242  03A4  00A8               	movwf	??___aldiv
  2243  03A5  0828               	movf	??___aldiv,w
  2244  03A6  07A9               	addwf	___aldiv@counter,f
  2245  03A7                     l1133:	
  2246  03A7  1FA3               	btfss	___aldiv@divisor+3,7
  2247  03A8  2BAA               	goto	u691
  2248  03A9  2BAB               	goto	u690
  2249  03AA                     u691:	
  2250  03AA  2B9A               	goto	l1131
  2251  03AB                     u690:	
  2252  03AB                     l1135:	
  2253  03AB  3001               	movlw	1
  2254  03AC  00A8               	movwf	??___aldiv
  2255  03AD                     u705:	
  2256  03AD  1003               	clrc
  2257  03AE  0DAB               	rlf	___aldiv@quotient,f
  2258  03AF  0DAC               	rlf	___aldiv@quotient+1,f
  2259  03B0  0DAD               	rlf	___aldiv@quotient+2,f
  2260  03B1  0DAE               	rlf	___aldiv@quotient+3,f
  2261  03B2  0BA8               	decfsz	??___aldiv,f
  2262  03B3  2BAD               	goto	u705
  2263  03B4                     l1137:	
  2264  03B4  0823               	movf	___aldiv@divisor+3,w
  2265  03B5  0227               	subwf	___aldiv@dividend+3,w
  2266  03B6  1D03               	skipz
  2267  03B7  2BC2               	goto	u715
  2268  03B8  0822               	movf	___aldiv@divisor+2,w
  2269  03B9  0226               	subwf	___aldiv@dividend+2,w
  2270  03BA  1D03               	skipz
  2271  03BB  2BC2               	goto	u715
  2272  03BC  0821               	movf	___aldiv@divisor+1,w
  2273  03BD  0225               	subwf	___aldiv@dividend+1,w
  2274  03BE  1D03               	skipz
  2275  03BF  2BC2               	goto	u715
  2276  03C0  0820               	movf	___aldiv@divisor,w
  2277  03C1  0224               	subwf	___aldiv@dividend,w
  2278  03C2                     u715:	
  2279  03C2  1C03               	skipc
  2280  03C3  2BC5               	goto	u711
  2281  03C4  2BC6               	goto	u710
  2282  03C5                     u711:	
  2283  03C5  2BD5               	goto	l1143
  2284  03C6                     u710:	
  2285  03C6                     l1139:	
  2286  03C6  0820               	movf	___aldiv@divisor,w
  2287  03C7  02A4               	subwf	___aldiv@dividend,f
  2288  03C8  0821               	movf	___aldiv@divisor+1,w
  2289  03C9  1C03               	skipc
  2290  03CA  0F21               	incfsz	___aldiv@divisor+1,w
  2291  03CB  02A5               	subwf	___aldiv@dividend+1,f
  2292  03CC  0822               	movf	___aldiv@divisor+2,w
  2293  03CD  1C03               	skipc
  2294  03CE  0F22               	incfsz	___aldiv@divisor+2,w
  2295  03CF  02A6               	subwf	___aldiv@dividend+2,f
  2296  03D0  0823               	movf	___aldiv@divisor+3,w
  2297  03D1  1C03               	skipc
  2298  03D2  0F23               	incfsz	___aldiv@divisor+3,w
  2299  03D3  02A7               	subwf	___aldiv@dividend+3,f
  2300  03D4                     l1141:	
  2301  03D4  142B               	bsf	___aldiv@quotient,0
  2302  03D5                     l1143:	
  2303  03D5  3001               	movlw	1
  2304  03D6                     u725:	
  2305  03D6  1003               	clrc
  2306  03D7  0CA3               	rrf	___aldiv@divisor+3,f
  2307  03D8  0CA2               	rrf	___aldiv@divisor+2,f
  2308  03D9  0CA1               	rrf	___aldiv@divisor+1,f
  2309  03DA  0CA0               	rrf	___aldiv@divisor,f
  2310  03DB  3EFF               	addlw	-1
  2311  03DC  1D03               	skipz
  2312  03DD  2BD6               	goto	u725
  2313  03DE                     l1145:	
  2314  03DE  3001               	movlw	1
  2315  03DF  02A9               	subwf	___aldiv@counter,f
  2316  03E0  1D03               	btfss	3,2
  2317  03E1  2BE3               	goto	u731
  2318  03E2  2BE4               	goto	u730
  2319  03E3                     u731:	
  2320  03E3  2BAB               	goto	l1135
  2321  03E4                     u730:	
  2322  03E4                     l1147:	
  2323  03E4  082A               	movf	___aldiv@sign,w
  2324  03E5  1903               	btfsc	3,2
  2325  03E6  2BE8               	goto	u741
  2326  03E7  2BE9               	goto	u740
  2327  03E8                     u741:	
  2328  03E8  2BF4               	goto	l1151
  2329  03E9                     u740:	
  2330  03E9                     l1149:	
  2331  03E9  09AB               	comf	___aldiv@quotient,f
  2332  03EA  09AC               	comf	___aldiv@quotient+1,f
  2333  03EB  09AD               	comf	___aldiv@quotient+2,f
  2334  03EC  09AE               	comf	___aldiv@quotient+3,f
  2335  03ED  0AAB               	incf	___aldiv@quotient,f
  2336  03EE  1903               	skipnz
  2337  03EF  0AAC               	incf	___aldiv@quotient+1,f
  2338  03F0  1903               	skipnz
  2339  03F1  0AAD               	incf	___aldiv@quotient+2,f
  2340  03F2  1903               	skipnz
  2341  03F3  0AAE               	incf	___aldiv@quotient+3,f
  2342  03F4                     l1151:	
  2343  03F4  082E               	movf	___aldiv@quotient+3,w
  2344  03F5  00A3               	movwf	?___aldiv+3
  2345  03F6  082D               	movf	___aldiv@quotient+2,w
  2346  03F7  00A2               	movwf	?___aldiv+2
  2347  03F8  082C               	movf	___aldiv@quotient+1,w
  2348  03F9  00A1               	movwf	?___aldiv+1
  2349  03FA  082B               	movf	___aldiv@quotient,w
  2350  03FB  00A0               	movwf	?___aldiv
  2351  03FC                     l304:	
  2352  03FC  0008               	return
  2353  03FD                     __end_of___aldiv:	
  2354                           
  2355                           	psect	text8
  2356  052C                     __ptext8:	
  2357 ;; *************** function _echo *****************
  2358 ;; Defined at:
  2359 ;;		line 33 in file "sr04_serial_v02.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2373 ;;      Params:         0       0       0       0       0
  2374 ;;      Locals:         0       0       0       0       0
  2375 ;;      Temps:          5       0       0       0       0
  2376 ;;      Totals:         5       0       0       0       0
  2377 ;;Total ram usage:        5 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    1
  2380 ;; This function calls:
  2381 ;;		___awdiv
  2382 ;; This function is called by:
  2383 ;;		Interrupt level 1
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           
  2388                           ;psect for function _echo
  2389  052C                     _echo:	
  2390  052C                     i1l1343:	
  2391                           
  2392                           ;sr04_serial_v02.c: 35:     if (RBIF == 1)
  2393  052C  1C0B               	btfss	11,0	;volatile
  2394  052D  2D2F               	goto	u116_21
  2395  052E  2D30               	goto	u116_20
  2396  052F                     u116_21:	
  2397  052F  2D55               	goto	i1l1353
  2398  0530                     u116_20:	
  2399  0530                     i1l1345:	
  2400                           
  2401                           ;sr04_serial_v02.c: 36:     {;sr04_serial_v02.c: 37:         RBIE = 0;
  2402  0530  118B               	bcf	11,3	;volatile
  2403                           
  2404                           ;sr04_serial_v02.c: 38:         if (RB4 == 1) {
  2405  0531  1E06               	btfss	6,4	;volatile
  2406  0532  2D34               	goto	u117_21
  2407  0533  2D35               	goto	u117_20
  2408  0534                     u117_21:	
  2409  0534  2D36               	goto	i1l99
  2410  0535                     u117_20:	
  2411  0535                     i1l1347:	
  2412                           
  2413                           ;sr04_serial_v02.c: 41:             TMR1ON = 1;
  2414  0535  1410               	bsf	16,0	;volatile
  2415  0536                     i1l99:	
  2416                           ;sr04_serial_v02.c: 42:         }
  2417                           
  2418                           
  2419                           ;sr04_serial_v02.c: 43:         if (RB4 == 0) {
  2420  0536  1A06               	btfsc	6,4	;volatile
  2421  0537  2D39               	goto	u118_21
  2422  0538  2D3A               	goto	u118_20
  2423  0539                     u118_21:	
  2424  0539  2D55               	goto	i1l1353
  2425  053A                     u118_20:	
  2426  053A                     i1l1349:	
  2427                           
  2428                           ;sr04_serial_v02.c: 44:             TMR1ON = 0;
  2429  053A  1010               	bcf	16,0	;volatile
  2430  053B                     i1l1351:	
  2431                           
  2432                           ;sr04_serial_v02.c: 45:             d = (TMR1L | (TMR1H << 8)) / 58;
  2433  053B  303A               	movlw	58
  2434  053C  00F0               	movwf	___awdiv@divisor
  2435  053D  3000               	movlw	0
  2436  053E  00F1               	movwf	___awdiv@divisor+1
  2437  053F  080F               	movf	15,w	;volatile
  2438  0540  00F9               	movwf	??_echo
  2439  0541  01FA               	clrf	??_echo+1
  2440  0542  0879               	movf	??_echo,w
  2441  0543  00FA               	movwf	??_echo+1
  2442  0544  01F9               	clrf	??_echo
  2443  0545  0879               	movf	??_echo,w
  2444  0546  040E               	iorwf	14,w	;volatile
  2445  0547  00F2               	movwf	___awdiv@dividend
  2446  0548  087A               	movf	??_echo+1,w
  2447  0549  00F3               	movwf	___awdiv@dividend+1
  2448  054A  120A  118A  23FD  120A  118A  	fcall	___awdiv
  2449  054F  0871               	movf	?___awdiv+1,w
  2450  0550  1283               	bcf	3,5	;RP0=0, select bank0
  2451  0551  1303               	bcf	3,6	;RP1=0, select bank0
  2452  0552  00C5               	movwf	_d+1
  2453  0553  0870               	movf	?___awdiv,w
  2454  0554  00C4               	movwf	_d
  2455  0555                     i1l1353:	
  2456                           
  2457                           ;sr04_serial_v02.c: 48:     RBIF = 0;
  2458  0555  100B               	bcf	11,0	;volatile
  2459  0556                     i1l1355:	
  2460                           
  2461                           ;sr04_serial_v02.c: 49:     RBIE = 1;
  2462  0556  158B               	bsf	11,3	;volatile
  2463  0557                     i1l101:	
  2464  0557  087D               	movf	??_echo+4,w
  2465  0558  00FF               	movwf	btemp+1
  2466  0559  087C               	movf	??_echo+3,w
  2467  055A  008A               	movwf	10
  2468  055B  0E7B               	swapf	(??_echo+2)^(0+4294967168),w
  2469  055C  0083               	movwf	3
  2470  055D  0EFE               	swapf	btemp,f
  2471  055E  0E7E               	swapf	btemp,w
  2472  055F  0009               	retfie
  2473  0560                     __end_of_echo:	
  2474                           
  2475                           	psect	intentry
  2476  0004                     __pintentry:	
  2477                           ;incstack = 0
  2478                           ; Regs used in _echo: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2479                           
  2480  0004                     interrupt_function:	
  2481  007E                     saved_w	set	btemp
  2482  0004  00FE               	movwf	btemp
  2483  0005  0E03               	swapf	3,w
  2484  0006  00FB               	movwf	??_echo+2
  2485  0007  080A               	movf	10,w
  2486  0008  00FC               	movwf	??_echo+3
  2487  0009  1283               	bcf	3,5	;RP0=0, select bank0
  2488  000A  1303               	bcf	3,6	;RP1=0, select bank0
  2489  000B  087F               	movf	btemp+1,w
  2490  000C  00FD               	movwf	??_echo+4
  2491  000D  120A  118A  2D2C   	ljmp	_echo
  2492                           
  2493                           	psect	text9
  2494  03FD                     __ptext9:	
  2495 ;; *************** function ___awdiv *****************
  2496 ;; Defined at:
  2497 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c90/common/awdiv.c"
  2498 ;; Parameters:    Size  Location     Type
  2499 ;;  divisor         2    0[COMMON] int 
  2500 ;;  dividend        2    2[COMMON] int 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  quotient        2    7[COMMON] int 
  2503 ;;  sign            1    6[COMMON] unsigned char 
  2504 ;;  counter         1    5[COMMON] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  2    0[COMMON] int 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2514 ;;      Params:         4       0       0       0       0
  2515 ;;      Locals:         4       0       0       0       0
  2516 ;;      Temps:          1       0       0       0       0
  2517 ;;      Totals:         9       0       0       0       0
  2518 ;;Total ram usage:        9 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_echo
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function ___awdiv
  2529  03FD                     ___awdiv:	
  2530  03FD                     i1l1299:	
  2531                           ;incstack = 0
  2532                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2533                           
  2534  03FD  01F6               	clrf	___awdiv@sign
  2535  03FE                     i1l1301:	
  2536  03FE  1FF1               	btfss	___awdiv@divisor+1,7
  2537  03FF  2C01               	goto	u106_21
  2538  0400  2C02               	goto	u106_20
  2539  0401                     u106_21:	
  2540  0401  2C09               	goto	i1l1307
  2541  0402                     u106_20:	
  2542  0402                     i1l1303:	
  2543  0402  09F0               	comf	___awdiv@divisor,f
  2544  0403  09F1               	comf	___awdiv@divisor+1,f
  2545  0404  0AF0               	incf	___awdiv@divisor,f
  2546  0405  1903               	skipnz
  2547  0406  0AF1               	incf	___awdiv@divisor+1,f
  2548  0407                     i1l1305:	
  2549  0407  01F6               	clrf	___awdiv@sign
  2550  0408  0AF6               	incf	___awdiv@sign,f
  2551  0409                     i1l1307:	
  2552  0409  1FF3               	btfss	___awdiv@dividend+1,7
  2553  040A  2C0C               	goto	u107_21
  2554  040B  2C0D               	goto	u107_20
  2555  040C                     u107_21:	
  2556  040C  2C16               	goto	i1l1313
  2557  040D                     u107_20:	
  2558  040D                     i1l1309:	
  2559  040D  09F2               	comf	___awdiv@dividend,f
  2560  040E  09F3               	comf	___awdiv@dividend+1,f
  2561  040F  0AF2               	incf	___awdiv@dividend,f
  2562  0410  1903               	skipnz
  2563  0411  0AF3               	incf	___awdiv@dividend+1,f
  2564  0412                     i1l1311:	
  2565  0412  3001               	movlw	1
  2566  0413  00F4               	movwf	??___awdiv
  2567  0414  0874               	movf	??___awdiv,w
  2568  0415  06F6               	xorwf	___awdiv@sign,f
  2569  0416                     i1l1313:	
  2570  0416  01F7               	clrf	___awdiv@quotient
  2571  0417  01F8               	clrf	___awdiv@quotient+1
  2572  0418                     i1l1315:	
  2573  0418  0870               	movf	___awdiv@divisor,w
  2574  0419  0471               	iorwf	___awdiv@divisor+1,w
  2575  041A  1903               	btfsc	3,2
  2576  041B  2C1D               	goto	u108_21
  2577  041C  2C1E               	goto	u108_20
  2578  041D                     u108_21:	
  2579  041D  2C55               	goto	i1l1335
  2580  041E                     u108_20:	
  2581  041E                     i1l1317:	
  2582  041E  01F5               	clrf	___awdiv@counter
  2583  041F  0AF5               	incf	___awdiv@counter,f
  2584  0420  2C2C               	goto	i1l1323
  2585  0421                     i1l1319:	
  2586  0421  3001               	movlw	1
  2587  0422                     u109_25:	
  2588  0422  1003               	clrc
  2589  0423  0DF0               	rlf	___awdiv@divisor,f
  2590  0424  0DF1               	rlf	___awdiv@divisor+1,f
  2591  0425  3EFF               	addlw	-1
  2592  0426  1D03               	skipz
  2593  0427  2C22               	goto	u109_25
  2594  0428                     i1l1321:	
  2595  0428  3001               	movlw	1
  2596  0429  00F4               	movwf	??___awdiv
  2597  042A  0874               	movf	??___awdiv,w
  2598  042B  07F5               	addwf	___awdiv@counter,f
  2599  042C                     i1l1323:	
  2600  042C  1FF1               	btfss	___awdiv@divisor+1,7
  2601  042D  2C2F               	goto	u110_21
  2602  042E  2C30               	goto	u110_20
  2603  042F                     u110_21:	
  2604  042F  2C21               	goto	i1l1319
  2605  0430                     u110_20:	
  2606  0430                     i1l1325:	
  2607  0430  3001               	movlw	1
  2608  0431                     u111_25:	
  2609  0431  1003               	clrc
  2610  0432  0DF7               	rlf	___awdiv@quotient,f
  2611  0433  0DF8               	rlf	___awdiv@quotient+1,f
  2612  0434  3EFF               	addlw	-1
  2613  0435  1D03               	skipz
  2614  0436  2C31               	goto	u111_25
  2615  0437  0871               	movf	___awdiv@divisor+1,w
  2616  0438  0273               	subwf	___awdiv@dividend+1,w
  2617  0439  1D03               	skipz
  2618  043A  2C3D               	goto	u112_25
  2619  043B  0870               	movf	___awdiv@divisor,w
  2620  043C  0272               	subwf	___awdiv@dividend,w
  2621  043D                     u112_25:	
  2622  043D  1C03               	skipc
  2623  043E  2C40               	goto	u112_21
  2624  043F  2C41               	goto	u112_20
  2625  0440                     u112_21:	
  2626  0440  2C48               	goto	i1l1331
  2627  0441                     u112_20:	
  2628  0441                     i1l1327:	
  2629  0441  0870               	movf	___awdiv@divisor,w
  2630  0442  02F2               	subwf	___awdiv@dividend,f
  2631  0443  0871               	movf	___awdiv@divisor+1,w
  2632  0444  1C03               	skipc
  2633  0445  03F3               	decf	___awdiv@dividend+1,f
  2634  0446  02F3               	subwf	___awdiv@dividend+1,f
  2635  0447                     i1l1329:	
  2636  0447  1477               	bsf	___awdiv@quotient,0
  2637  0448                     i1l1331:	
  2638  0448  3001               	movlw	1
  2639  0449                     u113_25:	
  2640  0449  1003               	clrc
  2641  044A  0CF1               	rrf	___awdiv@divisor+1,f
  2642  044B  0CF0               	rrf	___awdiv@divisor,f
  2643  044C  3EFF               	addlw	-1
  2644  044D  1D03               	skipz
  2645  044E  2C49               	goto	u113_25
  2646  044F                     i1l1333:	
  2647  044F  3001               	movlw	1
  2648  0450  02F5               	subwf	___awdiv@counter,f
  2649  0451  1D03               	btfss	3,2
  2650  0452  2C54               	goto	u114_21
  2651  0453  2C55               	goto	u114_20
  2652  0454                     u114_21:	
  2653  0454  2C30               	goto	i1l1325
  2654  0455                     u114_20:	
  2655  0455                     i1l1335:	
  2656  0455  0876               	movf	___awdiv@sign,w
  2657  0456  1903               	btfsc	3,2
  2658  0457  2C59               	goto	u115_21
  2659  0458  2C5A               	goto	u115_20
  2660  0459                     u115_21:	
  2661  0459  2C5F               	goto	i1l1339
  2662  045A                     u115_20:	
  2663  045A                     i1l1337:	
  2664  045A  09F7               	comf	___awdiv@quotient,f
  2665  045B  09F8               	comf	___awdiv@quotient+1,f
  2666  045C  0AF7               	incf	___awdiv@quotient,f
  2667  045D  1903               	skipnz
  2668  045E  0AF8               	incf	___awdiv@quotient+1,f
  2669  045F                     i1l1339:	
  2670  045F  0878               	movf	___awdiv@quotient+1,w
  2671  0460  00F1               	movwf	?___awdiv+1
  2672  0461  0877               	movf	___awdiv@quotient,w
  2673  0462  00F0               	movwf	?___awdiv
  2674  0463                     i1l382:	
  2675  0463  0008               	return
  2676  0464                     __end_of___awdiv:	
  2677  007E                     btemp	set	126	;btemp
  2678  007E                     wtemp0	set	126


Data Sizes:
    Strings     22
    Constant    10
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      46
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> buffer(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 19
		 -> buffer(BANK0[8]), STR_1(CODE[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _echo in COMMON

    _echo->___awdiv

Critical Paths under _main in BANK0

    _main->_UART_Init
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_Write_Text->_UART_Write
    _UART_Init->___aldiv

Critical Paths under _echo in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _echo in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _echo in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _echo in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2703
                                             33 BANK0      3     3      0
                          _UART_Init
                         _UART_Write
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1429
                                             14 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      7     5      2     416
                                              1 BANK0      7     5      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     836
                                             15 BANK0     18    14      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _echo                                                 5     5      0     452
                                              9 COMMON     5     5      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _UART_Write
   _UART_Write_Text
     _UART_Write
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _echo (ROOT)
   ___awdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     24      2E       5       57.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3C      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Nov 13 03:43:46 2019

                       _d 0044                         pc 0002               __CFG_CP$OFF 0000  
                      l80 0593                        l59 035F                        l83 059D  
                      l89 04EF              ___awdiv@sign 0076                        fsr 0004  
                     l304 03FC                       l225 0282                       l501 04A9  
                     l511 052B                       l294 0374                       _GIE 005F  
                     _RB1 0031                       _RB2 0032                       _RB3 0033  
                     _RB4 0034              __CFG_CPD$OFF 0000                       u710 03C6  
                     u711 03C5                       u640 0599                       u705 03AD  
                     u641 0598                       u730 03E4                       u650 0367  
                     u810 04A5                       u731 03E3                       u715 03C2  
                     u651 0366                       u811 04A4                       u740 03E9  
                     u660 0378                       u820 04F8                       u741 03E8  
                     u725 03D6                       u661 0377                       u901 02BE  
                     u805 0499                       u821 04F7                       u670 0397  
                     u910 02E7                       u902 02BF                       u750 046E  
                     u671 0396                       u911 02E6                       u903 02C4  
                     u751 046D                       u920 02F5                       u904 02C5  
                     u840 050A                       u905 02CA                       u841 0509  
                     u690 03AB                       u930 030E                       u906 02CB  
                     u770 0480                       u850 0514                       u691 03AA  
                     u771 047F                       u851 0513                       u835 04FC  
                     u685 039C                       u941 0320                       u925 02F0  
                     u765 0472                       u950 034D                       u942 0321  
                     u790 0491                       u870 0527                       u951 034C  
                     u943 0326                       u935 0309                       u791 0490  
                     u871 0526                       u855 0510                       u944 0327  
                     u880 0293                       u960 04B9                       u945 032C  
                     u785 0481                       u865 051B                       u946 032D  
                     u890 02AC                       u970 04DD                       u795 048D  
                     u980 04EF                       u885 028E                       u981 04EE  
                     u990 01A7                       u895 02A7                       u991 01A6  
                     fsr0 0004                       indf 0000              __CFG_FOSC$HS 0000  
            __CFG_LVP$OFF 0000                      l1111 0593                      l1121 0378  
                    l1113 0599                      l1131 039A                      l1123 0383  
                    l1115 0360                      l1211 0343                      l1203 0283  
                    l1141 03D4                      l1133 03A7                      l1125 0387  
                    l1117 0363                      l1221 0358                      l1213 034D  
                    l1205 02DE                      l1151 03F4                      l1143 03D5  
                    l1135 03AB                      l1127 038F                      l1119 0367  
                    l1223 0359                      l1215 0351                      l1207 02E7  
                    l1231 04AF                      l1145 03DE                      l1137 03B4  
                    l1129 0397                      l1225 035C                      l1217 0352  
                    l1209 0340                      l1233 04CB                      l1161 0471  
                    l1241 01A7                      l1401 00BB                      l1139 03C6  
                    l1147 03E4                      l1219 0355                      l1235 04D3  
                    l1171 0497                      l1163 0478                      l1155 0464  
                    l1251 01D1                      l1243 01AE                      l1411 00C9  
                    l1403 00BC                      l1149 03E9                      l1229 04AA  
                    l1173 0498                      l1165 047C                      l1157 0468  
                    l1181 04F0                      l1261 01EA                      l1253 01D9  
                    l1245 01B3                      l1237 019C                      l1421 0113  
                    l1413 00D3                      l1405 00BE                      l1175 049F  
                    l1167 0480                      l1159 046E                      l1191 050A  
                    l1183 04F8                      l1271 0208                      l1255 01DD  
                    l1239 01A1                      l1431 0126                      l1423 011F  
                    l1415 00E2                      l1407 00BF                      l1169 0491  
                    l1177 04A5                      l1193 0514                      l1185 04FB  
                    l1281 0228                      l1273 0212                      l1257 01E1  
                    l1249 01B4                      l1441 0158                      l1433 012D  
                    l1425 0122                      l1417 00F1                      l1409 00C6  
                    l1361 002A                      l1195 051A                      l1187 0502  
                    l1283 0258                      l1275 0218                      l1267 01EC  
                    l1259 01E5                      l1291 027E                      l1443 0173  
                    l1435 0130                      l1427 0123                      l1419 010C  
                    l1371 0047                      l1363 002B                      l1197 0521  
                    l1189 0506                      l1285 025F                      l1277 021F  
                    l1445 017A                      l1437 013A                      l1429 0125  
                    l1381 0057                      l1373 004D                      l1365 002C  
                    l1357 0023                      l1199 0527                      l1287 0263  
                    l1279 0223                      l1447 0186                      l1439 0149  
                    l1391 007B                      l1383 0058                      l1375 0051  
                    l1367 002D                      l1359 0026                      l1289 026C  
                    l1393 008A                      l1385 005F                      l1377 0054  
                    l1369 003C                      l1395 00A5                      l1387 0062  
                    l1379 0055                      l1469 01C6                      l1397 00AC  
                    l1389 006C                      l1399 00B8                      STR_1 057A  
                    STR_2 058D                      STR_3 058D                      STR_4 058D  
                    _BRGH 04C2                      u1000 01E1                      _CREN 00C4  
                    u1001 01E0                      u1010 0207                      u1011 0206  
                    u1020 0212                      u1021 0211                      u1030 0218  
                    u1031 0217                      u1015 0203                      u1040 026C  
                    u1200 008A                      u1041 026B                      u1201 0089  
                    u1050 027E                      u1210 00E2                      u1051 027D  
                    u1211 00E1                      u1220 00F1                      u1221 00F0  
                    u1205 0086                      u1230 0149                      u1231 0148  
                    u1215 00DE                      u1240 0158                      u1241 0157  
                    u1225 00ED                      u1235 0145                      u1307 0136  
                    u1317 018E                      u1245 0154                      u1190 007B  
                    u1191 007A                      u1257 005C                      u1195 0077  
                    u1267 0068                      u1277 00C3                      u1287 00CF  
                    u1297 012A                      _RBIE 005B                      _RBIF 0058  
                    _RCIF 0065                      i1l99 0536                      _SPEN 00C7  
                    _TRMT 04C1                      _TXEN 04C5                      _SYNC 04C4  
            __CFG_WRT$OFF 0000                      _echo 052C                      _main 0023  
                    btemp 007E             __CFG_BOREN$ON 0000                      start 0010  
 __end_of_UART_Write_Text 04F0                     ?_echo 0070           __end_of___aldiv 03FD  
                   ?_main 0070           __end_of___awdiv 0464             __CFG_WDTE$OFF 0000  
         ___awdiv@divisor 0070                     _T1CON 0010           __end_of___lwdiv 04AA  
                   i1l101 0557           __end_of___lwmod 052C                     i1l382 0463  
         ___awdiv@counter 0075                     _RCREG 001A                     _TMR1H 000F  
                   _TMR1L 000E                     _SPBRG 0099                     _PORTB 0006  
                   _TRISB 0086                     _TXREG 0019               ?_UART_Write 0070  
      __size_of_UART_Init 00DD           __end_of_dpowers 057A                     pclath 000A  
                   status 0003                     wtemp0 007E           __end_of_sprintf 0283  
         __initialization 0013              __end_of_echo 0560              __end_of_main 0199  
                  ??_echo 0079                    ??_main 0041          ___awdiv@dividend 0072  
                  u110_20 0430                    u110_21 042F                    i1l1301 03FE  
                  i1l1311 0412                    i1l1303 0402                    i1l1321 0428  
                  i1l1313 0416                    i1l1305 0407                    i1l1331 0448  
                  i1l1323 042C                    i1l1315 0418                    i1l1307 0409  
                  i1l1333 044F                    u111_25 0431                    i1l1325 0430  
                  i1l1317 041E                    i1l1309 040D                    i1l1327 0441  
                  i1l1319 0421                    i1l1335 0455                    i1l1351 053B  
                  i1l1343 052C                    u112_20 0441                    i1l1337 045A  
                  i1l1329 0447                    u112_21 0440                    i1l1345 0530  
                  i1l1353 0555                    i1l1339 045F                    i1l1355 0556  
                  i1l1347 0535                    u112_25 043D                    i1l1349 053A  
                  i1l1299 03FD                    u113_25 0449                    u114_20 0455  
                  u106_20 0402                    u114_21 0454                    u106_21 0401  
                  u115_20 045A                    u107_20 040D                    u115_21 0459  
                  u107_21 040C                    u108_20 041E                    u116_20 0530  
                  u108_21 041D                    u116_21 052F                    u117_20 0535  
                  u117_21 0534                    u109_25 0422                    u118_20 053A  
                  u118_21 0539                    _TMR1ON 0080                    _TRISC6 043E  
                  _TRISC7 043F            __CFG_PWRTE$OFF 0000         __end_of_UART_Init 0360  
     __size_of_UART_Write 000E                 ??___aldiv 0028                 ??___awdiv 0074  
        ?_UART_Write_Text 0021                 ??___lwdiv 0024                 ??___lwmod 002C  
                  _buffer 0046          ___awdiv@quotient 0077                    saved_w 007E  
               ??_sprintf 0031   __end_of__initialization 001F            __pcstackCOMMON 0070  
              __pbssBANK0 0044                __pmaintext 0023                __pintentry 0004  
            ??_UART_Write 0020                __stringtab 0560                   ___aldiv 0360  
                 ___awdiv 03FD        __end_of_UART_Write 059E                   ___lwdiv 0464  
                 ___lwmod 04F0                   __ptext1 0199                   __ptext2 04F0  
                 __ptext3 0464                   __ptext4 04AA                   __ptext5 0590  
                 __ptext6 0283                   __ptext7 0360                   __ptext8 052C  
                 __ptext9 03FD                   _dpowers 0570          ___aldiv@dividend 0024  
                 _sprintf 0199      end_of_initialization 001F          ___aldiv@quotient 002B  
               _UART_Init 0283            UART_Write@data 0020                ?_UART_Init 002F  
__size_of_UART_Write_Text 0046       start_initialization 0013                 ___latbits 0002  
           __pcstackBANK0 0020               sprintf@flag 0035               sprintf@prec 0036  
        ___lwdiv@dividend 0022                  ?___aldiv 0020                  ?___awdiv 0070  
                ?___lwdiv 0020                  ?___lwmod 0028               ??_UART_Init 0033  
               __pstrings 0560          ___lwdiv@quotient 0025                  ?_sprintf 002E  
              UART_Init@x 003F         ??_UART_Write_Text 0023           ___aldiv@divisor 0020  
       interrupt_function 0004           ___aldiv@counter 0029         UART_Init@baudrate 002F  
             __stringbase 056F          __size_of___aldiv 009D          __size_of___awdiv 0067  
        __size_of___lwdiv 0046          __size_of___lwmod 003C        __end_of__stringtab 0570  
              sprintf@val 0037           ___lwdiv@divisor 0020           ___lwdiv@counter 0027  
        __size_of_sprintf 00EA             __size_of_echo 0034       UART_Write_Text@text 0021  
           __size_of_main 0176                  intlevel1 0000                 sprintf@ap 0034  
               sprintf@sp 0039          ___lwmod@dividend 002A                 stringcode 056A  
         _UART_Write_Text 04AA                  sprintf@c 003A                  sprintf@f 002E  
         ___lwmod@divisor 0028           ___lwmod@counter 002D                  stringdir 056A  
                stringtab 0560              ___aldiv@sign 002A                _UART_Write 0590  
        UART_Write_Text@i 0026  
